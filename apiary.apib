FORMAT: 1A
HOST: https://www.ribose.com/

# Ribose API

[comment]: <> (INTRODUCTION section)

This is the Ribose API.

[comment]: <> (REFERENCE section)

## Data Structures



### DatetimeString (string)

### email (string)

### id (number)

### uuid (string)
[comment]: <> (uuid is used globally)

### Invitation (object)

* `id` (id) - invitation
* `email` (email, nullable) - invitee email
* `body` (string, nullable) - Invitation body message
* `created_at` (DatetimeString)  -  invitation creation
* `state` (enum[number])
    * Members
        * 0 - Pending
        * 1 - Accepted
        * 2 - Rejected
        * 3 - Maybe
        * 100 - Invalid
* `type` (string)
* `updated_at` (DatetimeString) - invitation update
* `invitee` (InviterInvitee)
* `inviter` (InviterInvitee)

### InvitationToIndigo (Invitation)

* `type`: Invitation::ToIndigo (string, fixed)

### InvitationToConnection (Invitation)

* `type`: Invitation::ToConnection (enum[string], default)
    * Members
        * Invitation::ToConnection
        * Invitation::ToIndigo - if invitee is not a Ribose member


### InvitationToSpace (Invitation)

* `type` (enum[string])
    * Members
        * Invitation::ToSpace (default)
        * Invitation::ToIndigo - if invitee is not a Ribose member
* `space` (InvitationSpace)

### JoinSpaceRequest (Invitation)

* `type`: Invitation::JoinSpaceRequest (string, fixed)
* `space` (InvitationSpace)

### InvitationsToSpace (object)

* `requested_at` (number) - token representing a timestamp of this request
* `total` (number) - total number of objects
* `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
    * *3 (string)* (id) - integer order on current page => invitation ID
* `objects` (object)
    * *123456 (string)* (object) - an object indexed by invitation ID
        * `id` (id) - invitation
        * `email` (email, nullable) - invitee email
        * `body`  (string, nullable) - Invitation body message
        * `created_at` (DatetimeString) - invitation creation
        * `state` (enum[number])
            * Members
                * 0 - Pending
                * 1 - Accepted
                * 2 - Rejected
                * 3 - Maybe
                * 100 - Invalid
        * `type`: Invitation::ToSpace (string, fixed)
        * `updated_at` (DatetimeString)
        * `invitee` (InviterInvitee)
        * `space` (InvitationSpace)
        * `inviter` (InviterInvitee)

### JoinSpaceRequests (object)

* `requested_at` (number) - token representing a timestamp of this request
* `total` (number) - total number of objects
* `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
    * *3 (string)* (id) - integer order on current page => invitation ID
* `objects` (object)
    * *123456 (string)* (object) - an object indexed by invitation ID
        * `id` (id) - invitation
        * `email` (email, nullable) - invitee email
        * `body`  (string, nullable) - Invitation body message
        * `created_at` (DatetimeString) - invitation creation
        * `state` (enum[number])
            * Members
                * 0 - Pending
                * 1 - Accepted
                * 2 - Rejected
                * 3 - Maybe
                * 100 - Invalid
        * `type`: Invitation::JoinSpaceRequest (string, fixed)
        * `updated_at` (DatetimeString)
        * `invitee` (InviterInvitee)
        * `space` (InvitationSpace)
        * `inviter` (InviterInvitee) - Space admin

### InviterInvitee (object)

* `id` (uuid) - user ID
* `connected` (boolean) - `true` iff this User is connected to current User, or if this User *is* the current User
* `name` (string) - User's display name
* `mutual_spaces` (array[uuid]) - mutual Space ID strings


### InvitationSpace (object)

* `id` (uuid)
* `name` (string) - Space name
* `members_count` (number) - how many members it contains
## Group Self Profile

### Self Profile [/people/profile]

#### Show [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + `user` (object)
            + `first_name`       (string)
            + `id`               (uuid)
            + `last_name`        (string)
            + `indigo_user_id`   (uuid)
            + `name`             (string)
            + `fields`           (array[object])
                + `name`             (string)
                + `base_name`        (string)
                + `title`            (string)
                + `type`             (string)
                + `value`            (string, nullable)
                + `value_type`       (string, nullable)
                + `value_type_title` (string, nullable)
                + `visibility`       (string)
            + `avatar` (object, nullable)
                + `id`                           (number)
                + `last_resize_info_for_cropper` (string)
                + `thumb_width`                  (number)
                + `thumb_height`                 (number)


#### Update names [PUT]

+ Request (application/json)

    + Attributes (object)
        + `user` (object)
            + `first_name` (string) - at least 2 characters long
            + `last_name` (string) - at least 2 characters long

+ Response 200 (application/json)

    + Attributes (object)
        + `user` (object)
            + `first_name`       (string)
            + `id`               (uuid)
            + `last_name`        (string)
            + `indigo_user_id`   (uuid)
            + `name`             (string)
            + `fields`           (array[object])
                + `name`             (string)
                + `base_name`        (string)
                + `title`            (string)
                + `type`             (string)
                + `value`            (string, nullable)
                + `value_type`       (string, nullable)
                + `value_type_title` (string, nullable)
                + `visibility`       (string)
            + `avatar` (object, nullable)
                + `id`                           (number)
                + `last_resize_info_for_cropper` (string)
                + `thumb_width`                  (number)
                + `thumb_height`                 (number)


### Set login [PUT /people/users/{user_id}]

+ Parameters
    + `user_id` (uuid) - UUID of the current User

+ Request (application/json)

    + Attributes (object)
        + `login` (string) - must be between 7 to 40 characters long

+ Response 403 (application/json)

+ Response 422 (application/json)

+ Response 200 (application/json)

    + Attributes (object)

## Group Calendar

### Calendars [/calendar/calendar]

#### Retrieve a calendar collection [GET]

+ Attributes
    + `start` (number) - Fetch events starting from a date (an integer computed by the difference in days between the date and 01/01/1970).
    + `length` (number) - How many days to fetch.
    + `cal_ids`: `_H~C_Bn.J` (string)

        Specify the calendars to fetch with `calendar_ids` encoded by `Range Codec`.

    + `time_zone`: `Etc/UTC` (string)

        Specify the time zone for the events.

+ Request Retrieve only the calendar collection (application/json)

        {}

+ Response 200 (application/json)

        {
            "filter": {
                "enabled": [
                    7,
                    113,
                    110,
                    8
                ],
                "userSetting": [0]
            },
            "cal_info": [
                {
                    "id": 7,
                    "owner_type": "User",
                    "name": "jasmine.green",
                    "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "owner_name": "Personal",
                    "display_name": "jasmine.green (Personal)",
                    "can_manage": true,
                    "can_create_event": true
                },
                {
                    "id": 113,
                    "owner_type": "User",
                    "name": "A new personal calendar",
                    "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "owner_name": "Personal",
                    "display_name": "A new personal calendar (Personal)",
                    "can_manage": true,
                    "can_create_event": true
                },
                {
                    "id": 110,
                    "owner_type": "Space",
                    "name": "hihihih",
                    "owner_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                    "owner_name": "hihihih",
                    "display_name": "hihihih (hihihih)",
                    "can_manage": true,
                    "can_create_event": true
                },
                {
                    "id": 8,
                    "owner_type": "Space",
                    "name": "The Earth",
                    "owner_id": "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79",
                    "owner_name": "Peter Tam",
                    "display_name": "The Earth (Universe)",
                    "can_manage": true,
                    "can_create_event": true
                }
            ],
            "spaces_permission": {
                "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92": true,
                "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79": true
            },
            "requested_at": 847475124
        }

+ Request Retrieve events in the calendar collection (application/json)

        {
            "start": 17465,
            "length": 15,
            "cal_ids": "_H~C_Bn.J",
            "time_zone": "Etc/UTC"
        }

+ Response 200 (application/json)

        {
            "head_events": [
                {
                    "id": 2,
                    "name": "My first recurrence",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "2",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T08:00:00.000Z",
                    "utc_finish": "2017-11-07T09:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508399939
                },
                {
                    "id": 64,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-11-15",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                },
                {
                    "id": 75,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T00:00:00.000Z",
                    "utc_finish": "2017-11-09T00:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 112,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,
                    5,
                    6",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-26T07:30:00.000Z",
                    "utc_finish": "2017-10-26T08:30:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                }
            ],
            "indices": {
                "17465": [113],
                "17466": [114],
                "17467": [115],
                "17468": [174],
                "17469": [],
                "17470": [],
                "17471": [],
                "17472": [116],
                "17473": [117],
                "17474": [118],
                "17475": [],
                "17476": [],
                "17477": [1,3],
                "17478": [65],
                "17479": [82,119]
            },
            "events": [
                {
                    "id": 1,
                    "name": "My first event!!! (Edited)",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "recurring_type": "not_repeat",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T12:00:00.000Z",
                    "utc_finish": "2017-11-07T13:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508401619
                },
                {
                    "id": 3,
                    "name": "My first recurrence",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 2,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "2",
                    "my_note": "",
                    "old_head_id": 2,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T08:00:00.000Z",
                    "utc_finish": "2017-11-07T09:00:00.000Z",
                    "utc_old_start": "2017-11-07T08:00:00.000Z",
                    "utc_old_finish": "2017-11-07T09:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508399939
                },
                {
                    "id": 65,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-11-15",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": "2017-11-08T08:30:00.000Z",
                    "utc_old_finish": "2017-11-08T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 82,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T00:00:00.000Z",
                    "utc_finish": "2017-11-09T00:00:00.000Z",
                    "utc_old_start": "2017-11-09T00:00:00.000Z",
                    "utc_old_finish": "2017-11-09T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 113,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-26T07:30:00.000Z",
                    "utc_finish": "2017-10-26T08:30:00.000Z",
                    "utc_old_start": "2017-10-26T07:30:00.000Z",
                    "utc_old_finish": "2017-10-26T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                },
                {
                    "id": 114,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-27T07:30:00.000Z",
                    "utc_finish": "2017-10-27T08:30:00.000Z",
                    "utc_old_start": "2017-10-27T07:30:00.000Z",
                    "utc_old_finish": "2017-10-27T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                },
                {
                    "id": 115,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-28T07:30:00.000Z",
                    "utc_finish": "2017-10-28T08:30:00.000Z",
                    "utc_old_start": "2017-10-28T07:30:00.000Z",
                    "utc_old_finish": "2017-10-28T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                },
                {
                    "id": 116,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-02T07:30:00.000Z",
                    "utc_finish": "2017-11-02T08:30:00.000Z",
                    "utc_old_start": "2017-11-02T07:30:00.000Z",
                    "utc_old_finish": "2017-11-02T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 117,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-03T07:30:00.000Z",
                    "utc_finish": "2017-11-03T08:30:00.000Z",
                    "utc_old_start": "2017-11-03T07:30:00.000Z",
                    "utc_old_finish": "2017-11-03T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 118,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-04T07:30:00.000Z",
                    "utc_finish": "2017-11-04T08:30:00.000Z",
                    "utc_old_start": "2017-11-04T07:30:00.000Z",
                    "utc_old_finish": "2017-11-04T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 119,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T07:30:00.000Z",
                    "utc_finish": "2017-11-09T08:30:00.000Z",
                    "utc_old_start": "2017-11-09T07:30:00.000Z",
                    "utc_old_finish": "2017-11-09T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 174,
                    "name": "Test event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "recurring_type": "not_repeat",
                    "my_note": null,
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-29T12:00:00.000Z",
                    "utc_finish": "2017-10-29T13:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509012877
                }
            ],
            "requested_at": 847478097
        }

#### Create a calendar [POST]


+ Attributes (object)
    + `calendar[name]` (string) - Name of the calendar.
    + `calendar[owner_type]` (enum[string], required) - Type of the owner of the calendar.
        + members
            + `User`
            + `Space`
    + `calendar[owner_id]` (uuid, required) - Id of the owner of the calendar.

+ Request (application/json)

        {
            "calendar[name]": "A new personal calendar",
            "calendar[owner_type]": "User",
            "calendar[owner_id]": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150"
        }

+ Response 201 (application/json)

        {
            "calendar": {
                "id": 113,
                "owner_type": "User",
                "name": "A new personal calendar",
                "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "owner_name": "Personal",
                "display_name": "A new personal calendar (Personal)",
                "can_manage": true,
                "can_create_event": true
            }
        }

### Calendar [/calendar/calendar/{calendar_id}]

#### Delete a calendar [DELETE]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.

+ Attributes
    + `move_events` (boolean) - Whether to move events to a new calendar.
    + `new_cal_id` (number) - Id of the new calendar for the moving events.

+ Request Delete together with all the events inside (application/json)

        {}

+ Response 200 (application/json)

        {
            "id": 113
        }

+ Request Delete and move events to another calendar (application/json)

        {
            "move_events": true,
            "new_cal_id": 112
        }

+ Response 200 (application/json)

        {
            "old_cal_id": 114,
            "new_cal_id": 112
        }

### Events [/calendar/calendar/{calendar_id}/event]

#### Create an event [POST]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.

+ Attributes
    + `event[name]` (string) -  Name of the event.
    + `event[all_day]` (boolean) - Whether the event is an all-day event.
    + `event[date_start]` (string, required) - The start date of the event.
    + `event[date_finish]` (string, required) - The finish date of the event.
    + `event[time_start]` (string, required) - The start time of the event.
    + `event[time_finish]` (string, required) - The finish time of the event.
    + `event[where]` (string) - The location where the event happens.
    + `event[description]` (string) - The description of the event.
    + `event[recurring_type]` (enum[string]) - The recurring type of the event (absence means `not_repeat`).
        + members
            + `not_repeat`
            + `daily`
            + `weekly`
            + `monthly`
            + `yearly`
            + `weekday`
            + `mo_we_fr`
            + `tu_th`
    + `event[until]` (enum[string])
        + members
          + `never` - Indicates the recurring series will never end.
          + `to_date` - Indicates the recurring series will end at a date specified in `event[until_date]`.
    + `event[repeat_every]` (number) - Repeats by the number of units given by the recurring type.
    + `event[until_date]`: dd/mm/yyyy, mm/dd/yyyy, dd.mm.yyyy, yyyy-mm-dd (string)

        Repeats until the specified date.

    + `event[repeat_by]`: 2,4,7 (string)

        Repeats by the days in a week (1-7 representing Monday to Sunday), separated by a delimiter ",".

+ Request With no recurrence (application/json)

        {
            "event[name]": "My first event!!!",
            "event[all_day]": true,
            "event[date_start]": "07/11/2017",
            "event[date_finish]": "07/11/2017",
            "event[time_start]": "12:00am",
            "event[time_finish]": "12:00am"
        }

+ Response 201 (application/json)

        {
            "events": {
                "id": 1,
                "name": "My first event!!!",
                "description": "",
                "where": "",
                "all_day": true,
                "recurring_type": "not_repeat",
                "my_note": null,
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-11-07T12:00:00.000Z",
                "utc_finish": "2017-11-07T13:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1508398190
            }
        }

+ Request With recurrence (application/json)

        {
            "event[name]": "My first recurrence",
            "event[date_start]": "07/11/2017",
            "event[time_start]": "8:00am",
            "event[date_finish]": "07/11/2017",
            "event[time_finish]": "9:00am",
            "event[recurring_type]": "weekly",
            "event[until]": "never",
            "event[repeat_every]": 1,
            "event[until_date]": "",
            "event[where]": "",
            "event[description]": "",
            "event[repeat_by]": 2,
            "event[all_day]": false
        }

+ Response 201 (application/json)

        {
            "events": [
                {
                    "id": 65,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": "2017-11-08T08:30:00.000Z",
                    "utc_old_finish": "2017-11-08T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 66,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-15T08:30:00.000Z",
                    "utc_finish": "2017-11-15T09:30:00.000Z",
                    "utc_old_start": "2017-11-15T08:30:00.000Z",
                    "utc_old_finish": "2017-11-15T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 67,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-22T08:30:00.000Z",
                    "utc_finish": "2017-11-22T09:30:00.000Z",
                    "utc_old_start": "2017-11-22T08:30:00.000Z",
                    "utc_old_finish": "2017-11-22T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 68,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-29T08:30:00.000Z",
                    "utc_finish": "2017-11-29T09:30:00.000Z",
                    "utc_old_start": "2017-11-29T08:30:00.000Z",
                    "utc_old_finish": "2017-11-29T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 69,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-06T08:30:00.000Z",
                    "utc_finish": "2017-12-06T09:30:00.000Z",
                    "utc_old_start": "2017-12-06T08:30:00.000Z",
                    "utc_old_finish": "2017-12-06T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 70,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-13T08:30:00.000Z",
                    "utc_finish": "2017-12-13T09:30:00.000Z",
                    "utc_old_start": "2017-12-13T08:30:00.000Z",
                    "utc_old_finish": "2017-12-13T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561}],
                    "head_event": {
                    "id": 64,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                }
            ]
        }


### Event [/calendar/calendar/{calendar_id}/event/{event_id}]

#### Retrieve an event [GET]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.
    + `event_id` (number, required) - Id of the event.

+ Request (application/json)

        {}

+ Response 200 (application/json)

        {
            "filter": {
                "enabled": [7],
                "userSetting": [0]
            },
            "cal_info": [
                {
                    "id": 7,
                    "owner_type": "User",
                    "name": "Test personal calendar",
                    "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "owner_name": "Personal",
                    "display_name": "Test personal calendar (Personal)",
                    "can_manage": true,
                    "can_create_event": true
                }
            ],
            "spaces_permission": {
                "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92": true,
                "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79": true
            },
            "event": {
                "id": 174,
                "name": "Test event",
                "description": "",
                "where": "",
                "all_day": true,
                "recurring_type": "not_repeat",
                "my_note": null,
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-10-29T12:00:00.000Z",
                "utc_finish": "2017-10-29T13:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1509012877
            },
            "head_event": null,
            "recurring": []
        }

#### Update an event [PUT]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.
    + `event_id` (number, required) - Id of the event.

+ Attributes
    + `event[future]` (boolean) - Whether to update events in the series from this event on.
    + `event[all]` (boolean) - Whether to update the entire series.
    + `event[name]` (string) -  Name of the event.
    + `event[all_day]` (boolean) - Whether the event is an all-day event.
    + `event[date_start]` (string, required) - The start date of the event.
    + `event[date_finish]` (string, required) - The finish date of the event.
    + `event[time_start]` (string, required) - The start time of the event.
    + `event[time_finish]` (string, required) - The finish time of the event.
    + `event[where]` (string) - The location where the event happens.
    + `event[description]` (string) - The description of the event.
    + `event[recurring_type]` (enum[string]) - The recurring type of the event (absence means `not_repeat`).
        + members
            + `not_repeat`
            + `daily`
            + `weekly`
            + `monthly`
            + `yearly`
            + `weekday`
            + `mo_we_fr`
            + `tu_th`
    + `event[until]` (enum[string])
        + members
          + `never` - Indicates the recurring series will never end.
          + `to_date` - Indicates the recurring series will end at a date specified in `event[until_date]`.
    + `event[repeat_every]` (number) - Repeats by the number of units given by the recurring type.
    + `event[until_date]`: dd/mm/yyyy, mm/dd/yyyy, dd.mm.yyyy, yyyy-mm-dd (string)

        Repeats until the specified date.

    + `event[repeat_by]`: 2,4,7 (string)

        Repeats by the days in a week (1-7 representing Monday to Sunday), separated by a delimiter ",".

+ Request With no recurrence (application/json)

        {
            "event[name]": "My first event!!! (Edited)",
            "event[time_start]": "12:00pm",
            "event[time_finish]": "1:00pm",
            "event[until]": "never",
            "event[repeat_every]": 1,
            "event[until_date]": "",
            "event[invite_others]": "",
            "event[see_guest_list]": "",
            "event[my_note]": "",
            "event[repeat_by]": ""
        }

+ Response 200 (application/json)

        {
            "events":[
                {
                    "id": 1,
                    "name": "My first event!!! (Edited)",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "recurring_type": "not_repeat",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T12:00:00.000Z",
                    "utc_finish": "2017-11-07T13:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508401619
                }
            ]
        }

+ Request With recurrence and for future (application/json)

        {
            "event[date_start]": "22/11/2017",
            "event[time_start]": "",
            "event[date_finish]": "22/11/2017",
            "event[time_finish]": "",
            "event[all_day]": true,
            "event[repeat_every]": 1,
            "event[until_date]": "13/12/2017",
            "event[future]": true
        }

+ Response 200 (application/json)

        {
            "events": [
                {
                    "id": 71,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-22T12:00:00.000Z",
                    "utc_finish": "2017-11-22T13:00:00.000Z",
                    "utc_old_start": "2017-11-22T12:00:00.000Z",
                    "utc_old_finish": "2017-11-22T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                },
                {
                    "id": 72,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-29T12:00:00.000Z",
                    "utc_finish": "2017-11-29T13:00:00.000Z",
                    "utc_old_start": "2017-11-29T12:00:00.000Z",
                    "utc_old_finish": "2017-11-29T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                },
                {
                    "id": 73,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-06T12:00:00.000Z",
                    "utc_finish": "2017-12-06T13:00:00.000Z",
                    "utc_old_start": "2017-12-06T12:00:00.000Z",
                    "utc_old_finish": "2017-12-06T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510},
                {
                    "id": 74,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-13T12:00:00.000Z",
                    "utc_finish": "2017-12-13T13:00:00.000Z",
                    "utc_old_start": "2017-12-13T12:00:00.000Z",
                    "utc_old_finish": "2017-12-13T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                }
            ],
            "head_event":    {
                "id": 67,
                "name": "Recurrent event",
                "description": "",
                "where": "",
                "all_day": true,
                "head_flag": true,
                "head_id": null,
                "recurring_type": "weekly",
                "until": "to_date",
                "until_date": "2017-12-13",
                "repeat_every": 1,
                "repeat_by": "3",
                "my_note": "",
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-11-22T12:00:00.000Z",
                "utc_finish": "2017-11-22T13:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1508402510
            }
        }

+ Request With recurrence and for the entire series (application/json)

        {
            "event[date_start]": "16/11/2017",
            "event[time_start]": "10:00am",
            "event[date_finish]": "16/11/2017",
            "event[time_finish]": "11:00am",
            "event[repeat_every]": 1,
            "event[until_date]": "14/12/2017",
            "event[invite_others]": "",
            "event[see_guest_list]": "",
            "event[all_day]": false,
            "event[all]": true
        }

+ Response 200 (application/json)

        {
            "events":[
                {
                    "id": 82,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T00:00:00.000Z",
                    "utc_finish": "2017-11-09T00:00:00.000Z",
                    "utc_old_start": "2017-11-09T00:00:00.000Z",
                    "utc_old_finish": "2017-11-09T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 83,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-16T00:00:00.000Z",
                    "utc_finish": "2017-11-16T00:00:00.000Z",
                    "utc_old_start": "2017-11-16T00:00:00.000Z",
                    "utc_old_finish": "2017-11-16T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 84,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-23T00:00:00.000Z",
                    "utc_finish": "2017-11-23T00:00:00.000Z",
                    "utc_old_start": "2017-11-23T00:00:00.000Z",
                    "utc_old_finish": "2017-11-23T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 85,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-30T00:00:00.000Z",
                    "utc_finish": "2017-11-30T00:00:00.000Z",
                    "utc_old_start": "2017-11-30T00:00:00.000Z",
                    "utc_old_finish": "2017-11-30T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 86,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-07T00:00:00.000Z",
                    "utc_finish": "2017-12-07T00:00:00.000Z",
                    "utc_old_start": "2017-12-07T00:00:00.000Z",
                    "utc_old_finish": "2017-12-07T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 87,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-14T00:00:00.000Z",
                    "utc_finish": "2017-12-14T00:00:00.000Z",
                    "utc_old_start": "2017-12-14T00:00:00.000Z",
                    "utc_old_finish": "2017-12-14T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                }
            ],
            "head_event":{
                "id": 75,
                "name": "Another recurrent event",
                "description": "",
                "where": "",
                "all_day": false,
                "head_flag": true,
                "head_id": null,
                "recurring_type": "weekly",
                "until": "to_date",
                "until_date": "2017-12-14",
                "repeat_every": 1,
                "repeat_by": "4",
                "my_note": "",
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-11-09T00:00:00.000Z",
                "utc_finish": "2017-11-09T00:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1508406018
            },
            "head_id": 75,
            "first_entity": 82,
            "last_entity": 87
        }

#### Delete an event [DELETE]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.
    + `event_id` (number, required) - Id of the event.

+ Attributes
    + `after` (boolean) - Whether to delete event in the series from this event on.
    + `all` (boolean) - Whether to delete the entire series.

+ Request With no recurrence (application/json)

        {}

+ Response 200 (application/json)

        {}

+ Request With recurrence and for future (application/json)

        {
            "after": true
        }

+ Response 200 (application/json)

        {
            "head_id": 90,
            "first_entity": 91,
            "last_entity": 91
        }

+ Request With recurrence and for future (application/json)

        {
            "after": true
        }

+ Response 200 (application/json)

        {
            "head_id": 90,
            "first_entity": 91,
            "last_entity": 91
        }


+ Request With recurrence and for the entire series (application/json)

        {
            "all": true
        }

+ Response 200 (application/json)

        {}
## Group Wiki

### Wikis [/spaces/{space_id}/wiki/wiki_pages]

#### Retrieve a wiki collection [GET]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.

+ Attributes
    + `direction` (enum[string]) - Defines how wikis are sorted in the collection.
        + members
            + `desc`
            + `asc`
    + `order_by` (enum[string]) - Defines of which property the collection will sort.
        + members
            + `updated_at`
    + `start` (number) - Fetch the collection starting from which wiki.
    + `length` (number) - Fetch how many wikis at once.
    + `s` (string) - 

+ Request (application/json)

        {
            "direction": "desc",
            "order_by": "updated_at",
            "start": 0,
            "length": 25,
            "s": ""
        }

+ Response 200 (application/json)

        {
            "requested_at": 1127761243,
            "total": 2,
            "indices": {
                "0": 39,
                "1": 38
            },
            "objects": [{
                "id": 38,
                "name": "My new wiki edited",
                "address": "my-new-wiki",
                "created_at": "2017-10-30T07:00:25.000+00:00",
                "updated_at": "2017-10-30T07:09:00.000+00:00",
                "version": null,
                "allow_attachments": false,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents": [{
                        "insert": "\n"
                    }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.000+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            },
            {
                "id": 39,
                "name": "The next wiki",
                "address": "the-next-wiki",
                "created_at": "2017-10-30T07:30:03.000+00:00",
                "updated_at": "2017-10-30T07:30:03.000+00:00",
                "version": null,
                "allow_attachments": true,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents": [{
                        "insert": "\n"
                    }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:30:03.000+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            }],
            "tags": {
                "selected_tags": [],
                "related_tags": [],
                "all_tags": []
            },
            "allow_create": true,
            "recent_activity": [{
                "date": "Monday, October 30, 2017",
                "links": [{
                    "id": 39,
                    "name": "The next wiki",
                    "path": "the-next-wiki"
                },
                {
                    "id": 38,
                    "name": "My new wiki edited",
                    "path": "my-new-wiki"
                }]
            }]
        }

#### Create a wiki [POST]


+ Attributes
    + `wiki_page[name]` (string) - The name of the wiki page.
    + `wiki_page[tag_list]` (string) - The list of tags of the wiki page.

+ Request (application/json)

        {
            "wiki_page[name]": "My new wiki",
            "wiki_page[tag_list]": ""
        }

+ Response 201 (application/json)

        {
            "wiki_page":  {
                "id": 38,
                "name": "My new wiki",
                "address": "my-new-wiki",
                "created_at": "2017-10-30T07:00:25.000+00:00",
                "updated_at": "2017-10-30T07:00:25.000+00:00",
                "version": null,
                "allow_attachments": false,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents":  [{"insert": "\n"}],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.719+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user":  {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            },
            "tags": {
                "selected_tags": [],
                "related_tags": [],
                "all_tags": []},
                "allow_create": true,
                "recent_activity": [{
                    "date": "Monday, October 30, 2017",
                    "links": [{
                        "id": 38,
                        "name": "My new wiki",
                        "path": "my-new-wiki"
                    }]
                }]
            }
        }

### Wiki [/spaces/{space_id}/wiki/wiki/{address}]

#### Update a wiki [PUT]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `address` (string) - The value of the address attribute of the wiki.

+ Attributes
    + `wiki_page[name]` (string)
    + `wiki_page[tag_list]` (string)

+ Request (application/json)

        {
            "wiki_page[name]": "My new wiki edited"
        }

+ Response 200 (application/json)

        {
            "wiki_page":  {
                "id": 38,
                "name": "My new wiki edited",
                "address": "my-new-wiki",
                "created_at": "2017-10-30T07:00:25.000+00:00",
                "updated_at": "2017-10-30T07:09:00.719+00:00",
                "version": null,
                "allow_attachments": false,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents":  [{ "insert": "\n" }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.719+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user":  {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            },
            "tags": {
                "selected_tags": [],
                "related_tags": [],
                "all_tags": []},
                "allow_create": true,
                "recent_activity": [{
                    "date": "Monday, October 30, 2017",
                    "links": [{
                        "id": 38,
                        "name": "My new wiki edited",
                        "path": "my-new-wiki"
                    }]
                }]
            }
        }

#### Delete a wiki [DELETE]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `address` (string) - The value of the address attribute of the wiki.

+ Request (application/json)

        {}

+ Response 200 (application/json)

        {}

### Live editors [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/live_editors]

#### Create a live editor [POST]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (string) - The id of the wiki page.

+ Attributes

+ Request (application/json)

        {}

+ Response 200 (application/json)

        {
            "live_editor": {
                "id": 265,
                "wiki_page_id": 38,
                "created_at": "2017-10-30T09:30:24.915+00:00",
                "updated_at": "2017-10-30T09:30:24.915+00:00",
                "name": "Jasmine Green"
            },
            "wiki_page": {
                "live_edit": {
                    "revision": 0,
                    "quill_contents": [{ "insert":"\n" }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.000+00:00"
                }
            }
        }

### Live editor [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/live_editors/{live_editor_id}]

#### Update a live editor [PUT]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (number) - The id of the wiki page.
    + `live_editor_id` (number) - The id of the wiki live editor.

+ Attributes
    + `live_editor[updated_at]`: null (string, fixed)

+ Request (application/json)

        {
            "live_editor[updated_at]": null
        }

+ Response 200 (application/json)

        {
            "live_editor": {
                "id": 265,
                "wiki_page_id": 38,
                "created_at": "2017-10-30T09:30:24.000+00:00",
                "updated_at": "2017-10-30T09:43:33.516+00:00",
                "name": "Jasmine Green"
            }
        }

### Increments [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/increments]

#### Create an increment [POST]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (number) - The id of the wiki page.

+ Attributes
    + `increment[delta]` (object) - The Quilljs delta object. See https://github.com/quilljs/delta for details.
    + `increment[revision]` - The client's revision of the document.

+ Request (application/json)

        {
            "increment[delta]": { "ops": [{ "insert": "a" }] },
            "increment[revision]": 0
        }

+ Response 200 (application/json)

        {
            "increment":{
                "id": "85833009-5d9f-4fd7-bde6-1cf07895b2c1",
                "wiki_page_id": 38,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "live_editor_id": 265,
                "created_at": "2017-10-30T09:48:39.991+00:00",
                "updated_at": "2017-10-30T09:48:39.991+00:00",
                "status": 0,
                "revision": 0
            }
        }


### Increment [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/increments/#{increment_id}]

#### Retrieve an increment [GET]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (number) - The id of the wiki page.
    + `increment_id` (uuid) - The id of the wiki increment.

+ Attributes
    + `revision` (number) - The client's revision of the document. The API will respond with the lastest delta if the increment is success.

+ Request (application/json)

        {
            revision: 1
        }

+ Response 200 (application/json)

        {
            "increment": {
                "id": "2a12a905-16d8-43c5-93eb-b1f4a7826ce0",
                "wiki_page_id": 38,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "live_editor_id": 265,
                "created_at": "2017-10-30T09:48:39.000+00:00",
                "updated_at": "2017-10-30T09:48:39.000+00:00",
                "status": 2,
                "revision": 1
            },
            "delta": [
                {"retain": 1},
                {"insert": "b"}
            ]
        }


## File

### File API

#### Upload a file [POST /spaces/:id/file/files/upload]

  + Attributes
    + `id` (required, string) - UUID of space
    + `file_info[attachment][]` (required, array) - array of files to be uploaded
    + `file_info[tag_list]` (required, string) - list of tags separated by commas
    + `file_info[description]` (optional, string) - description of the file

  + Response 200 (application/json)
    + Attributes (object)
      + `attachment` (object) - the file attributes

  + Response 422 (application/json)
    + Attributes (object)
      + `attachment_errors` (string) - the error message

#### List files [GET /spaces/:id/file/files]

  + Attributes
    + `id` (required, string) - UUID of space
    + `order_by` (optional, string) - sort order of files, `name, size, date, author, file_type`, default `date`
    + `direction` (optional, string) - sort direction of files, `asc, desc`, default desc
    + `start` (optional, number) - starting index of file collection, default 0
    + `length` (optional, number) - maximum size of collection, default 100

  + Response 200 (application/json)
    + Attributes (object)
      + `total` (number) - total number of files
      + `indices` (object) - hash of index-file_id
      + `objects` (array) - array of file attributes
      + `tags` (object) - hash of tags
        + `all_tags` (array) - the array of all tags in space
        + `related_tags` (array) - array of tags related to the current file
        + `selected_tags` (array) - array of selected tags
      + `recent_activity` (array) - array of recent activities of files
        + `date` (string) - the date of the activities in format `%A, %B %d, %Y`
        + `links` (array) - the array of recent updated files inside the grouped date
          + `id` (number) - the ID of the file
          + `name` (string) - the name of the file
          + `path` (string) - the relative path of the link to the file
      + `permissions` (object) - the hash of the permissions of the user
        + `allow_create` (boolean) - the permission of the user to create a file
        + `allow_delete` (boolean) - the permission of the user to delete a file
        + `allow_download` (boolean) - the permission of the user to download a file
        + `allow_edit` (boolean) - the permission of the user to edit a file
        + `allow_mass_actions` (boolean) - the permission of the user to perform mass actions on files


#### Show a file [GET /spaces/:id/file/files/:file_id]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file
    + `format` (string, optional) - format of the resonse `json, html`

  + Response 200 (application/json)
    + Attributes (object)
      + `file` (object) - file attributes

#### Update a file [PUT /spaces/:id/file/files/:file_id]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file
    + `file_info[name]` (string, optional) - ID of file
    + `file_info[desciption]` (string, optional) - list of tags separated by commas

  + Response 200 (application/json)
    + Attributes (object)
      + `file` (object) - file attributes
      + `tags` (object) - hash of tags
        + `all_tags` (array) - the array of all tags in space
        + `related_tags` (array) - array of tags related to current file
        + `selected_tags` (array) - array of the selected tags
      + `recent_activity` (array) - array of recent activities of files
        + `id` (number)

  + Response 422 (application/json)
    + Attributes (object)
      + `hash` (object) - hash of errors

#### Delete a file [DELETE /spaces/:id/file/files/:file_id]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file or array of IDs

  + Response 200 (application/json)
    + Attributes (object)
      + `message` (object)
        + `records_name` (string) - name of record
        + `action_name` (string) - name of action
        + `ok_count` (number) - number of successful files, only returned when deleting more than one file
        + `total_count` (number) - number of total files, only returned when files failed to delete

#### Get a file icon [GET /spaces/:id/file/files/]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file

  + Response 200 (application/json)
    + Attributes (object)
      + `icon_processed` (boolean) - the file icon has been processed or not
      + `icon_path` (string) - path of the file icon

#### Download a file [GET /spaces/:id/file/files/:file_id/download]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file or array of IDs

  + Response 200 (application/json)
    + Attributes

#### Show a file version [GET /spaces/:id/file/files/:file_id/versions/:file_version:id]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file
    + `file_version_id` (string, required) - ID of file version

  + Response 200 (application/json)
    + Attributes

#### Upload a file version [POST /spaces/:id/file/files/:file_id/versions/upload]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file
    + `file_version_id` (string, required) - ID of file version
    + `file_info_version` (string, optional) - description of the file version

  + Response 200 (application/json)
    + Attributes (object)
      + `attachment` (object) - file version attributes
        + `author` (string) - name of the author
        + `content_size` (number) - content size of the file version
        + `content_type` (string) - content type of the file version
        + `created_at` (string) - date of when the file version was created
        + `current_version_id` (string) - current version ID of the version of the file
        + `description` (string) - description of the file version
        + `file_info_id` (string) - version ID of the version of the file
        + `icon_path` (string) - path of the thumbnail of the file version
        + `name` (string) - name of the file version
        + `position` (number) - number of the order in position of the file version
        + `updated_at` (string) - when the file version was updated
        + `version` (number) - version number of the file

  + Response 422 (application/json)
    + Attributes (object)
      + `attachment_errors` (string) - error message

#### Revert a file version [GET /spaces/:id/file/files/:file_id/versions/:file_version_id/revert]

  + Attributes
    + `id` (string, required) - UUID of space
    + `file_id` (string, required) - ID of file
    + `file_version_id` (string, required) - ID of file version

  + Response 200 (application/json)
    + Attributes (object)
      + `hash` (object) - file attributes
## Group Invitation

### Invitation to Ribose [/invitations/to_new_member/{invitation_id}]

+ Parameters
    + `invitation_id` (id)

#### Resending [POST /invitations/to_new_member/{invitation_id}/resend]

    - inviter-only action
    - time throttled
    - only applicable to invitations sent to non-member emails

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)

        + success: true (boolean)

+ Response 422 (application/json)

    + Attributes (object)

        + error_message: "Relax. You'll be able to resend the invitation 24 hours after your previous attempt." (string) - the error message


#### Creating [POST /invitations/to_new_member/mass_create]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `emails` (array[email]) - must specify at least either `emails`
            + `body`:  (string) - Body of invitation message to the invitees

+ Response 422 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        * `invitations` (object)
            * `success` (object)
                * `emails` (object)
                    * *user@example.com (email)* (InvitationToIndigo) - an object indexed by Email
                * `user_ids` (object)
            * `errors` (object)
                * `emails`
                    * *user@example.com (email)* (array[string]) - Array of error strings indexed by Email
                * `user_ids` (object) - empty


+ Response 403 (application/json)

#### Retrieving [GET /invitations/to_new_member{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s`:  (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    * Attributes (object)
        * `requested_at` (number) - token representing a timestamp of this request
        * `rejected_ids` (array[id]) - rejected invitation IDs
        * `total` (number) - total number of objects
        * `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
            * *3 (string)* (id) - integer order on current page => invitation ID
        * `objects` (object)
            * *123456 (string)* (object) - an object indexed by invitation ID
                * `id` (id) - invitation
                * `email` (email, nullable) - invitee email
                * `body`  (string, nullable) - Invitation body message
                * `created_at` (DatetimeString) - invitation creation
                * `state` (enum[number])
                    * Members
                        * 0 - Pending
                        * 1 - Accepted
                        * 2 - Rejected
                        * 3 - Maybe
                        * 100 - Invalid
                * `type`: Invitation::ToIndigo (string, fixed)
                * `updated_at` (DatetimeString)
                * `invitee` (InviterInvitee)
                * `inviter` (InviterInvitee)

+ Response 403 (application/json)

+ Response 422 (application/json)


### Invitation to connection [/invitations/to_connection/{invitation_id}]

+ Parameters
    + `invitation_id` (id)

#### Deleting / Cancelling [DELETE]

    - an inviter-only action

+ Request (application/json)

+ Response 200 (application/json)

    + Body

            {}

+ Response 422 (application/json)

+ Response 403 (application/json)

#### Accepting / Rejecting [PUT]

    - an invitee-only action

+ Request (application/json)

    + Attributes (object)
        + `invitation` (object)
            + `state` (enum[number])
                * Members
                    * 1 - Accepting
                    * 2 - Rejecting (ignoring)

+ Response 200 (application/json)
    * Attributes (InvitationToConnection)

+ Response 403 (application/json)

+ Response 422 (application/json)


#### Retrieving [GET /invitations/to_connection{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s`:  (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    * Attributes (object)
        * `requested_at` (number) - token representing a timestamp of this request
        * `rejected_ids` (array[id]) - rejected invitation IDs
        * `total` (number) - total number of objects
        * `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
            * *3 (string)* (id) - integer order on current page => invitation ID
        * `objects` (object)
            * *123456 (string)* (object) - an object indexed by invitation ID
                * `id` (id) - invitation
                * `email` (email, nullable) - invitee email
                * `body`  (string, nullable) - Invitation body message
                * `created_at` (DatetimeString) - invitation creation
                * `state` (enum[number])
                    * Members
                        * 0 - Pending
                        * 1 - Accepted
                        * 2 - Rejected
                        * 3 - Maybe
                        * 100 - Invalid
                * `type`: Invitation::ToConnection (string, fixed)
                * `updated_at` (DatetimeString)
                * `invitee` (InviterInvitee)
                * `inviter` (InviterInvitee)

+ Response 403 (application/json)

+ Response 422 (application/json)

#### Creating [POST /invitations/to_connection/mass_create]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `emails` (array[email]) - must specify at least either `emails` / `user_ids`
            + `user_ids` (array[uuid]) - must specify at least either `emails` / `user_ids`
            + `body`:  (string) - Body of invitation message to the invitees

+ Response 422 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        * `invitations` (object)
            * `success` (object)
                * `emails` (object)
                    * *user@example.com (email)* (InvitationToConnection) - an object indexed by Email
                * `user_ids` (object)
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (InvitationToConnection) - an object indexed by User UUIDs
            * `errors` (object)
                * `emails`
                    * *user@example.com (email)* (array[string]) - Array of error strings indexed by Email
                * `user_ids`
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (array[string]) - Array of error strings indexed by User UUIDs

+ Response 403 (application/json)


### Invitation to Space [/invitations/to_space/{invitation_id}]

+ Parameters
    + `invitation_id` (id)


#### Deleting a.k.a. Cancelling [DELETE]

    - an inviter-only action

+ Request (application/json)

+ Response 200 (application/json)

        * {}

+ Response 403 (application/json)

+ Response 422 (application/json)

#### Accepting / Rejecting [PUT]

    - an invitee-only action

+ Request (application/json)

    + Attributes (object)
        + `invitation` (object)
            + `state` (enum[number])
                * Members
                    * 1 - Accepting
                    * 2 - Rejecting (ignoring)


+ Response 200 (application/json)

    + Attributes (object)

        * `to_space` (InvitationToSpace)

#### Updating pre-assigned role [PUT /invitations/to_space/{invitation_id}]

    - inviter-only action

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `role_id` (id) - Space Role ID

+ Response 200 (application/json)

    + Attributes (object)

        * `to_space` (InvitationToSpace)


#### Retrieving [GET /invitations/to_space{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s`:  (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    * Attributes (InvitationsToSpace)

+ Response 403 (application/json)

+ Response 422 (application/json)

#### Mass creating [POST /spaces/:space_id/invitations/to_space/mass_create]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `emails` (array[email])
            + `user_ids` (array[uuid])
            + `role_ids` (object)
                + *271A3A83-EA0C-450D-BAFB-51ED42C4CF10 (uuid)* (id) - Map from email / user ID to Space Role ID
                + *invitee@example.com (email)* (id) - Map from email / user ID to Space Role ID
            + `space_id` (uuid) - Space (same as :space_id)
            + `body` - Body of invitation message to the invitees

+ Response 200 (application/json)

    + Attributes (object)
        * `invitations` (object)
            * `success` (object)
                * `emails` (object)
                    * *user@example.com (email)* (object) - an object indexed by Email
                        * Invitee (InviterInvitee)
                * `user_ids` (object)
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (object) - an object indexed by User UUIDs
                        * Invitee (InviterInvitee)
            * `errors` (object)
                * `emails`
                    * *user@example.com (email)* (array[string]) - Array of error strings indexed by Email
                * `user_ids`
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (object) - Array of error strings indexed by User UUIDs

#### Creating [POST /invitations/to_space]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `state`: 0 (number, fixed)
            + `type`:  Invitation::ToSpace (string, fixed)
            + `space_id` (uuid) - Space ID
            + `body` (string) - Body of invitation message to the invitees
            + `invitee_id` (uuid) - invitee user ID

+ Response 200 (application/json)

    + Attributes (object)

        * `to_space` (InvitationToSpace)

### Join Space Request [/invitations/join_space_request/{invitation_id}]

+ Parameters
    + `invitation_id` (id)


#### Accepting / Rejecting a.k.a Ignoring [PUT]

    - An invitee-only action

+ Request (application/json)

    + Attributes (object)
        + `invitation` (object)
            + `state` (enum[number])
                * Members
                    * 1 - Accepting
                    * 2 - Rejecting (ignoring)

+ Response 200 (application/json)

    + Attributes (object)

        * `join_space_request` (InvitationToSpace)

#### Updating pre-assigned role [PUT]

    - A Space Admin-only action

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `role_id` (id) - Space Role Id

+ Response 200 (application/json)

    + Attributes (object)

        * `join_space_request` (InvitationToSpace)

#### Retrieving [GET /invitations/join_space_request{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s`:  (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (JoinSpaceRequests)

#### Creating [POST /invitations/join_space_request]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `state`: 0 (number, fixed)
            + `type`:  Invitation::JoinSpaceRequest (string, fixed)
            + `space_id` (uuid) - Space ID
            + `body` (string) - Body of invitation message to the invitees

+ Response 200 (application/json)

    + Attributes (JoinSpaceRequest)


## Group Space Member

### Space Members [/spaces/{space_id}/members]

+ Parameters

    + `space_id` (uuid)

#### Index [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        * `requested_at` (number) - token representing a timestamp of this request
        * `total` (number) - total number of objects
        * `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
            * *3 (string)* (id) - integer order on current page => Space Member ID
        * `objects` (object)
            * *123456 (string)* (object) - an object indexed by Space Member ID
                * `id`: 18700
                * `user_id` (uuid)
                * `space_id` (uuid)
                * `role_name_in_space` (enum[string])
                    * Members
                        * Member
                        * Administrator
                        * Read only
                * `user` (object) - attributes of this Space member
                    * `id` (uuid) - Ribose user ID
                    * `owner` (boolean) - `true` iff is the Space owner
                    * `admin` (boolean) - `true` iff is a Space admin
                    * `connected` (boolean) - `true` iff this Space member is a connection of current user
                    * `mutual_spaces` (array[uuid]) - UUIDs of mutual Spaces
                    * `name` (string) - Space Member's display name


#### Destroy [DELETE /spaces/{space_id}/members/{space_member_id}]

+ Parameters

    + `space_member_id` (id)

+ Request (application/json)

+ Response 403 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + `message` (string) - Success message for removal of member

### Fetching roles [GET /people/users/{user_id}/roles/get_roles{?in_space}]

+ Parameters

    + `user_id` (uuid) - UUID of the User involved
    + `in_space` (uuid) - UUID of the Space involved

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + `roles` (object) - 0-indexed map
            + *`0` (string)* (object)
                + `id` (id) - Role ID
                + `name` (enum[string])
                    + Members
                        + Member
                        + Administrator
                        + Read only
                + `space_id` (uuid) - UUID of the associated Space
        + `user_role` (object) - details of current user's role
            + `id` (id) - Role ID
            + `name` (enum[string])
                + Members
                    + Member
                    + Administrator
                    + Read only
            + `space_id` (uuid) - UUID of the associated Space

### Assigning roles [PUT /people/users/{user_id}/roles/change_assignment{?in_space}]

+ Parameters

    + `user_id` (uuid) - UUID of the User involved
    + `in_space` (uuid) - UUID of the Space involved

+ Request (application/json)

    + Attributes (object)
        + `checked_role`  (id) - Role ID

+ Response 200 (application/json)

    + Attributes (object)
        + Body
                {}
## User

### User Creation API

#### Check email uniqueness [GET /signup_validation/check_user_field_uniqueness]

  + Attributes
    + `email` (string, required) - email address of user

  + Response 200 (application/json)
    + Attributes (object)
      + `unique` (boolean)

#### Create sign-up request [POST /signup_requests]

  + Attributes
    + `email` (string, required) - email address of user

  + Response 200 (application/json)
    + Attributes

  + Response 422 (application/json)
    + Attributes

#### Submit sign-up details [POST /signup.user]

  + Attributes
    + `email` (string, required) - email address of user
    + `otp` (string, required) - OTP value from confirmation email
    + `password` (string, required) - string of new password

  + Response 201 (application/json)
    + Attributes(object)
      + `id` (string) - ID of new user
      + `name` (string) - username

  + Response 422 (application/json)
    + Attributes

