FORMAT: 1A
HOST: https://www.ribose.com/

# Ribose API

[comment]: <> (INTRODUCTION section)

This is the Ribose API.

[comment]: <> (DATA STRUCTURES section, has to be on top)

## Data Structures


### DatetimeString (string)

### email (string)

### id (number)

### uuid (string)
[comment]: <> (uuid is used globally)

### Invitation (object)

* `id` (id) - invitation
* `email` (email, nullable) - invitee email
* `body` (string, nullable) - Invitation body message
* `created_at` (DatetimeString)  -  invitation creation
* `state` (enum[number])
    * Members
        * 0 - Pending
        * 1 - Accepted
        * 2 - Rejected
        * 3 - Maybe
        * 100 - Invalid
* `type` (string)
* `updated_at` (DatetimeString) - invitation update
* `invitee` (InviterInvitee)
* `inviter` (InviterInvitee)

### InvitationToIndigo (Invitation)

* `type`: Invitation::ToIndigo (string, fixed)

### InvitationToConnection (Invitation)

* `type`: Invitation::ToConnection (enum[string], default)
    * Members
        * Invitation::ToConnection
        * Invitation::ToIndigo - if invitee is not a Ribose member


### InvitationToSpace (Invitation)

* `type` (enum[string])
    * Members
        * Invitation::ToSpace (default)
        * Invitation::ToIndigo - if invitee is not a Ribose member
* `space` (InvitationSpace)

### JoinSpaceRequest (Invitation)

* `type`: Invitation::JoinSpaceRequest (string, fixed)
* `space` (InvitationSpace)

### InvitationsToSpace (object)

* `requested_at` (number) - token representing a timestamp of this request
* `total` (number) - total number of objects
* `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
    * *3 (string)* (id) - integer order on current page => invitation ID
* `objects` (object)
    * *123456 (string)* (object) - an object indexed by invitation ID
        * `id` (id) - invitation
        * `email` (email, nullable) - invitee email
        * `body`  (string, nullable) - Invitation body message
        * `created_at` (DatetimeString) - invitation creation
        * `state` (enum[number])
            * Members
                * 0 - Pending
                * 1 - Accepted
                * 2 - Rejected
                * 3 - Maybe
                * 100 - Invalid
        * `type`: Invitation::ToSpace (string, fixed)
        * `updated_at` (DatetimeString)
        * `invitee` (InviterInvitee)
        * `space` (InvitationSpace)
        * `inviter` (InviterInvitee)

### JoinSpaceRequests (object)

* `requested_at` (number) - token representing a timestamp of this request
* `total` (number) - total number of objects
* `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
    * *3 (string)* (id) - integer order on current page => invitation ID
* `objects` (object)
    * *123456 (string)* (object) - an object indexed by invitation ID
        * `id` (id) - invitation
        * `email` (email, nullable) - invitee email
        * `body`  (string, nullable) - Invitation body message
        * `created_at` (DatetimeString) - invitation creation
        * `state` (enum[number])
            * Members
                * 0 - Pending
                * 1 - Accepted
                * 2 - Rejected
                * 3 - Maybe
                * 100 - Invalid
        * `type`: Invitation::JoinSpaceRequest (string, fixed)
        * `updated_at` (DatetimeString)
        * `invitee` (InviterInvitee)
        * `space` (InvitationSpace)
        * `inviter` (InviterInvitee) - Space admin

### InviterInvitee (object)

* `id`: 109EF27E-B8BD-4CAC-9DC5-4F00BD2444ED (uuid) - user ID
* `connected`: true (boolean) - `true` iff this User is connected to current User, or if this User *is* the current User
* `name`: Joe Public (string) - User's display name
* `mutual_spaces` (array[uuid]) - mutual Space ID strings


### InvitationSpace (object)

* `id`: 948AD10F-B2A2-4DDC-9AC7-E766E4586A20 (uuid)
* `name`: My first space (string) - Space name
* `members_count`: 10 (number) - how many members it contains

### File (object)

+ `allow_create` (boolean) - the permission of User to create a file
+ `allow_delete` (boolean) - the permission of User to delete a file
+ `allow_download` (boolean) - the permission of User to download a file
+ `allow_edit` (boolean) - the permission of User to edit a file
+ `allow_update` (boolean) - the permission of User to update a file
+ `author` (string) - the name of User
+ `content_size` (number) - the content size of the file
+ `content_type` (string) - the content type of the file
+ `created_at` (DatetimeString) - of when the file created
+ `current_version_id` (id) - the current version id of the version of the file
+ `description` (string) - the description of the file
+ `id` (id) - the id of the file
+ `name` (string) - the name of the file
+ `tag_list` (array[string]) - the list of tags
+ `updated_at` (DatetimeString) - of when the file updated
+ `version` (number) - the version number of the array of the file versions
+ `versions` (array[object]) - the array of the file version objects with attributes:
    + (object)
        + `author` (string) - the name of the author
        + `content_size` (number) - the content size of the file version
        + `content_type` (string) - the content type of the file version
        + `created_at` (DatetimeString) of when the file version created
        + `current_version_id` (id) - the current version id of the version of the file
        + `description` (string) - the description of the file version
        + `file_info_id` (id) - the version id of the version of the file
        + `icon_path` (string) - the path of the thumbnail of the file version
        + `name` (string) - the name of the file version
        + `position` (number) - the number of the order in position of the file version
        + `updated_at` (DatetimeString) - of when the file version updated
        + `version` (number) - the version number of the file version

### FileVersion (object)

+ `author` (string) - name of the author
+ `content_size` (number) - content size of the file version
+ `content_type` (string) - content type of the file version
+ `created_at` (DatetimeString) - date of when the file version was created
+ `current_version_id` (id) - current version ID of the version of the file
+ `description` (string) - description of the file version
+ `file_info_id` (id) - version ID of the version of the file
+ `icon_path` (string) - path of the thumbnail of the file version
+ `name` (string) - name of the file version
+ `position` (number) - number of the order in position of the file version
+ `updated_at` (DatetimeString) - when the file version was updated
+ `version` (number) - version number of the file

### Space (object)

* `id`: 948AD10F-B2A2-4DDC-9AC7-E766E4586A20 (uuid)
* `name`: My first space (string) - Space name
* `visibility`: visible (enum[string])
    * Members
        * visible
        * visible_name
        * invisible
* `members_count`: 10 (number) - how many members it contains

### User (object)

* `id`: 109EF27E-B8BD-4CAC-9DC5-4F00BD2444ED (uuid)
* `name`: Jane Blogg (string) - User's display name
+ `mutual_spaces` (array[uuid]) - list of mutual Space UUIDs

[comment]: <> (REFERENCE section)

## Group General

### Request settings [GET /settings]

+ Request (application/json)

+ Response 200 (application/json)

### Request spaces [GET /spaces]

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + `id` (number) - space ID
        + `name` (string) - name of the space
        + `joined_at` (string) - date of when the user joined the space
        + `created_at` (string) - date of when the space was created
        + `owned_roles` (array) - array of objects representing a space role related to the space
        + `access` (string) - options
        + `active` (boolean) - whether the space is active or not
        + `owner` (boolean) - whether the user is the owner of the space
        + `role_name` (string) - role of the current user, can be `Administrator`, `Member`, or `Read only`
        + `description` (string) - description of the space
        + `members_count` (number) - number of members in the space
        + `visibility` (string) - visibility of the space, can be `visible`, `visible_name`, or `invisible`

### User connections [GET /people/connections]

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + `id` (string) - user ID
        + `login` (string) - user login name
        + `jid` (string) - Jabber/XMPP ID of the user
        + `mutual_spaces` (array) - array of spaces that are shared by user and space member
        + `name` (string) - name of the user
        + `status_message` (string) - status message of the user
## Group Self Profile

### Self Profile [/people/profile]

#### Show [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + `user` (object)
            + `first_name`       (string)
            + `id`               (uuid)
            + `last_name`        (string)
            + `indigo_user_id`   (uuid)
            + `name`             (string)
            + `fields`           (array[object])
                + `name`             (string)
                + `base_name`        (string)
                + `title`            (string)
                + `type`             (string)
                + `value`            (string, nullable)
                + `value_type`       (string, nullable)
                + `value_type_title` (string, nullable)
                + `visibility`       (string)
            + `avatar` (object, nullable)
                + `id`                           (number)
                + `last_resize_info_for_cropper` (string)
                + `thumb_width`                  (number)
                + `thumb_height`                 (number)


#### Update names [PUT]

+ Request (application/json)

    + Attributes (object)
        + `user` (object)
            + `first_name` (string) - at least 2 characters long
            + `last_name` (string) - at least 2 characters long

+ Response 200 (application/json)

    + Attributes (object)
        + `user` (object)
            + `first_name`       (string)
            + `id`               (uuid)
            + `last_name`        (string)
            + `indigo_user_id`   (uuid)
            + `name`             (string)
            + `fields`           (array[object])
                + `name`             (string)
                + `base_name`        (string)
                + `title`            (string)
                + `type`             (string)
                + `value`            (string, nullable)
                + `value_type`       (string, nullable)
                + `value_type_title` (string, nullable)
                + `visibility`       (string)
            + `avatar` (object, nullable)
                + `id`                           (number)
                + `last_resize_info_for_cropper` (string)
                + `thumb_width`                  (number)
                + `thumb_height`                 (number)


### Set login [PUT /people/users/{user_id}]

+ Parameters
    + `user_id` (uuid) - UUID of the current User

+ Request (application/json)

    + Attributes (object)
        + `user` (object)
            + `login`: mynewusername (string) - must be between 7 to 40 characters long

+ Response 403 (application/json)

+ Response 422 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
## Group App Data

### Request information [GET /app_data]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)

        + `misc` (object)
            + `jabber` (object) - chat metadata for current user
                + `login`: username (string) - user login
                + `status`: unavailable (enum[string]) - user chat status
                    + Members
                        + unavailable
                        + available
                        + idle
                        + offline
                + `status_message`: "Free to chat!" (string)
            + `locale`: en (enum[string])
                + Members
                    + en - English
            + `notification` (object)
                + `notifications_last_received`: 1234567 (id) - last received notification item ID
                + `notifications_last_shown`: 1234123 (id) - last read notification item ID
            + `capps` (object)
                + *0 (string)* (object) - int-indexed metadata of Space Apps for current user
                    + `id`: 123456 (id) - ID of the App
                    + `app_name`: app/dashboard (enum[string])
                        + Members
                            + app/dashboard
                            + app/conversation
                            + app/file
                            + app/member
                            + app/calendar
                            + app/wiki
                            + app/poll
                    + `enabled`: true (boolean)
                    + `name`: null (string, nullable, fixed)
                    + `order_id`: 0 (number) - display purpose only
                    + `used_storage`: 0 (number) - counts how much storage is used by this App
                    + `owner_type`: Space (string, fixed)
                    + `owner_id`: 948AD10F-B2A2-4DDC-9AC7-E766E4586A20 (uuid) - UUID of the App's Space
                    + `system`: true (boolean, fixed)
                    + `app_type`: home (enum[string])
                        + Members
                            + home
                            + conversation
                            + file
                            + people
                            + calendar
                            + wiki
                            + poll
                    + `space_id`: 948AD10F-B2A2-4DDC-9AC7-E766E4586A20 (uuid) - UUID of the App's Space
                    + `namespace`: dashboard (enum[string])
                        + Members
                            + dashboard
                            + conversation
                            + file
                            + people
                            + calendar
                            + wiki
                            + poll
                    + `show_in_menu?`: true (boolean, fixed)
                    + `uses_email_notifications?`: false (boolean)
                    + `searchable?`: false (boolean) - whether Search results would contain this App
            + `status_message`: "Free to chat!" (string)
            + `number_of_connections`: 51 (number) - how many current connections are active
        + `user` (object) - profile of current user
            + `id` (uuid)
            + `login`: myusername (string, nullable) - login name of current user
            + `email` (email) - account's email address of current user
            + `created_at` (DatetimeString) - account's creation time
            + `activity_points` (object) - activity profile of current user
                + `level`: 3 (number)
                + `total`: 313370 (number) - total activity points gained since account creation
                + `last7days`: 120 (number) - activity points gained during the last 7 days
                + `last30days`: 720 (number) - activity points gained during the last 30 days
                + `points_till_next_level`: 1187255 (number)
                + `points_for_current_level`: 1457750 (number)
            + `mutual_users` (array[uuid]) - list of connected Users's UUID
            + `visible_spaces` (array[Space]) - list of current User's Spaces
            + `connection_id`: null (uuid, nullable)
            + `from_ribose?`: true (boolean, fixed)
            + `name`: Joe Public (string)
            + `connected_users` (array[User])
            + `badge_states` (array)
            + `avatar` (object) - current User's avatar metadata
                + `id`: 1512 (id) - avatar object ID
                + `thumb_width`: 500 (number) - avatar thumbnail image width
                + `thumb_height`: 520 (number) - avatar thumbnail image height
                + `generate_status`: SUCCESS (enum[string]) - whether thumbnail generation has succeeded
                    + Members
                        + SUCCESS
                        + FAIL
            + `profile` (object) - current User's Profile
                + `id`: 135 (id) - Profile object ID
                + `first_name`: Joe (string)
                + `last_name`: Blogg (string)
                + `user_id`: 109EF27E-B8BD-4CAC-9DC5-4F00BD2444ED (uuid) - corresponding Ribose User UUID
                + `fields` (object)
                    + `name` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `family`: Blogg (string)
                            + `given`: Joe (string)
                    + `note` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `value`: Hello, World!11 (string)
                    + `organization` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `visibility`: public (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `company`: Monster Inc (string)
                            + `department`: Animation (string)
                    + `url` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `value`: ribose.com (string)
                            + `scheme` (string, nullable)
                            + `mediatype` (string, nullable)
                    + `title` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `visibility`: public (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `value`: Animator (string)
                    + `address` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `type` (array[string])
                            + `visibility`: public (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `tz` (string, nullable)
                            + `geo` (string, nullable)
                            + `pobox` (string, nullable)
                            + `extended` (string, nullable)
                            + `street` (string, nullable)
                            + `locality` (string, nullable)
                            + `region` (string, nullable)
                            + `postalcode` (string, nullable)
                            + `country`: Planet Urf (string, nullable)
                            + `delivery` (string, nullable)
                    + `email` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `type` (array[string])
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `value`: joe@example.com (string)
                    + `birthday` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `year`: 1970 (number, nullable)
                            + `month`: 1 (number, nullable)
                            + `day`: 1 (number, nullable)
                    + `telephone` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `type` (array[string])
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `value`: 123454321 (string)
                    + `impp` (array[object])
                        + (object)
                            + `preferred`: false (boolean)
                            + `purpose` (array[string])
                            + `scheme`: skype (string)
                            + `visibility`: connection (enum[string])
                                + Members
                                    + public
                                    + connection
                                    + invisible
                            + `value`: myskypeid (string)
                + `name`: Joe Blogg (string) - concatenation of first- and last-name of current User
## Group Calendar

### Calendars [/calendar/calendar]

#### Retrieve a calendar collection [GET]

+ Attributes
    + `start` (number) - Fetch events starting from a date (an integer computed by the difference in days between the date and 01/01/1970).
    + `length` (number) - How many days to fetch.
    + `cal_ids`: `_H~C_Bn.J` (string)

        Specify the calendars to fetch with `calendar_ids` encoded by `Range Codec`.

    + `time_zone`: `Etc/UTC` (string)

        Specify the time zone for the events.

+ Request Retrieve only the calendar collection (application/json)

        {}

+ Response 200 (application/json)

        {
            "filter": {
                "enabled": [
                    7,
                    113,
                    110,
                    8
                ],
                "userSetting": [0]
            },
            "cal_info": [
                {
                    "id": 7,
                    "owner_type": "User",
                    "name": "jasmine.green",
                    "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "owner_name": "Personal",
                    "display_name": "jasmine.green (Personal)",
                    "can_manage": true,
                    "can_create_event": true
                },
                {
                    "id": 113,
                    "owner_type": "User",
                    "name": "A new personal calendar",
                    "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "owner_name": "Personal",
                    "display_name": "A new personal calendar (Personal)",
                    "can_manage": true,
                    "can_create_event": true
                },
                {
                    "id": 110,
                    "owner_type": "Space",
                    "name": "hihihih",
                    "owner_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                    "owner_name": "hihihih",
                    "display_name": "hihihih (hihihih)",
                    "can_manage": true,
                    "can_create_event": true
                },
                {
                    "id": 8,
                    "owner_type": "Space",
                    "name": "The Earth",
                    "owner_id": "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79",
                    "owner_name": "Peter Tam",
                    "display_name": "The Earth (Universe)",
                    "can_manage": true,
                    "can_create_event": true
                }
            ],
            "spaces_permission": {
                "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92": true,
                "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79": true
            },
            "requested_at": 847475124
        }

+ Request Retrieve events in the calendar collection (application/json)

        {
            "start": 17465,
            "length": 15,
            "cal_ids": "_H~C_Bn.J",
            "time_zone": "Etc/UTC"
        }

+ Response 200 (application/json)

        {
            "head_events": [
                {
                    "id": 2,
                    "name": "My first recurrence",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "2",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T08:00:00.000Z",
                    "utc_finish": "2017-11-07T09:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508399939
                },
                {
                    "id": 64,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-11-15",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                },
                {
                    "id": 75,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T00:00:00.000Z",
                    "utc_finish": "2017-11-09T00:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 112,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,
                    5,
                    6",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-26T07:30:00.000Z",
                    "utc_finish": "2017-10-26T08:30:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                }
            ],
            "indices": {
                "17465": [113],
                "17466": [114],
                "17467": [115],
                "17468": [174],
                "17469": [],
                "17470": [],
                "17471": [],
                "17472": [116],
                "17473": [117],
                "17474": [118],
                "17475": [],
                "17476": [],
                "17477": [1,3],
                "17478": [65],
                "17479": [82,119]
            },
            "events": [
                {
                    "id": 1,
                    "name": "My first event!!! (Edited)",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "recurring_type": "not_repeat",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T12:00:00.000Z",
                    "utc_finish": "2017-11-07T13:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508401619
                },
                {
                    "id": 3,
                    "name": "My first recurrence",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 2,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "2",
                    "my_note": "",
                    "old_head_id": 2,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T08:00:00.000Z",
                    "utc_finish": "2017-11-07T09:00:00.000Z",
                    "utc_old_start": "2017-11-07T08:00:00.000Z",
                    "utc_old_finish": "2017-11-07T09:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508399939
                },
                {
                    "id": 65,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-11-15",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": "2017-11-08T08:30:00.000Z",
                    "utc_old_finish": "2017-11-08T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 82,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T00:00:00.000Z",
                    "utc_finish": "2017-11-09T00:00:00.000Z",
                    "utc_old_start": "2017-11-09T00:00:00.000Z",
                    "utc_old_finish": "2017-11-09T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 113,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-26T07:30:00.000Z",
                    "utc_finish": "2017-10-26T08:30:00.000Z",
                    "utc_old_start": "2017-10-26T07:30:00.000Z",
                    "utc_old_finish": "2017-10-26T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                },
                {
                    "id": 114,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-27T07:30:00.000Z",
                    "utc_finish": "2017-10-27T08:30:00.000Z",
                    "utc_old_start": "2017-10-27T07:30:00.000Z",
                    "utc_old_finish": "2017-10-27T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                },
                {
                    "id": 115,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-28T07:30:00.000Z",
                    "utc_finish": "2017-10-28T08:30:00.000Z",
                    "utc_old_start": "2017-10-28T07:30:00.000Z",
                    "utc_old_finish": "2017-10-28T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002371
                },
                {
                    "id": 116,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-02T07:30:00.000Z",
                    "utc_finish": "2017-11-02T08:30:00.000Z",
                    "utc_old_start": "2017-11-02T07:30:00.000Z",
                    "utc_old_finish": "2017-11-02T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 117,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-03T07:30:00.000Z",
                    "utc_finish": "2017-11-03T08:30:00.000Z",
                    "utc_old_start": "2017-11-03T07:30:00.000Z",
                    "utc_old_finish": "2017-11-03T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 118,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-04T07:30:00.000Z",
                    "utc_finish": "2017-11-04T08:30:00.000Z",
                    "utc_old_start": "2017-11-04T07:30:00.000Z",
                    "utc_old_finish": "2017-11-04T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 119,
                    "name": "test",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 112,
                    "recurring_type": "weekly",
                    "until": "never",
                    "until_date": null,
                    "repeat_every": 1,
                    "repeat_by": "4,5,6",
                    "my_note": "",
                    "old_head_id": 112,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T07:30:00.000Z",
                    "utc_finish": "2017-11-09T08:30:00.000Z",
                    "utc_old_start": "2017-11-09T07:30:00.000Z",
                    "utc_old_finish": "2017-11-09T08:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509002372
                },
                {
                    "id": 174,
                    "name": "Test event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "recurring_type": "not_repeat",
                    "my_note": null,
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-10-29T12:00:00.000Z",
                    "utc_finish": "2017-10-29T13:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1509012877
                }
            ],
            "requested_at": 847478097
        }

#### Create a calendar [POST]


+ Attributes (object)
    + `calendar[name]` (string) - Name of the calendar.
    + `calendar[owner_type]` (enum[string], required) - Type of the owner of the calendar.
        + members
            + `User`
            + `Space`
    + `calendar[owner_id]` (uuid, required) - Id of the owner of the calendar.

+ Request (application/json)

        {
            "calendar[name]": "A new personal calendar",
            "calendar[owner_type]": "User",
            "calendar[owner_id]": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150"
        }

+ Response 201 (application/json)

        {
            "calendar": {
                "id": 113,
                "owner_type": "User",
                "name": "A new personal calendar",
                "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "owner_name": "Personal",
                "display_name": "A new personal calendar (Personal)",
                "can_manage": true,
                "can_create_event": true
            }
        }

### Calendar [/calendar/calendar/{calendar_id}]

#### Delete a calendar [DELETE]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.

+ Attributes
    + `move_events` (boolean) - Whether to move events to a new calendar.
    + `new_cal_id` (number) - Id of the new calendar for the moving events.

+ Request Delete together with all the events inside (application/json)

        {}

+ Response 200 (application/json)

        {
            "id": 113
        }

+ Request Delete and move events to another calendar (application/json)

        {
            "move_events": true,
            "new_cal_id": 112
        }

+ Response 200 (application/json)

        {
            "old_cal_id": 114,
            "new_cal_id": 112
        }

### Events [/calendar/calendar/{calendar_id}/event]

#### Create an event [POST]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.

+ Attributes
    + `event[name]` (string) -  Name of the event.
    + `event[all_day]` (boolean) - Whether the event is an all-day event.
    + `event[date_start]` (string, required) - The start date of the event.
    + `event[date_finish]` (string, required) - The finish date of the event.
    + `event[time_start]` (string, required) - The start time of the event.
    + `event[time_finish]` (string, required) - The finish time of the event.
    + `event[where]` (string) - The location where the event happens.
    + `event[description]` (string) - The description of the event.
    + `event[recurring_type]` (enum[string]) - The recurring type of the event (absence means `not_repeat`).
        + members
            + `not_repeat`
            + `daily`
            + `weekly`
            + `monthly`
            + `yearly`
            + `weekday`
            + `mo_we_fr`
            + `tu_th`
    + `event[until]` (enum[string])
        + members
          + `never` - Indicates the recurring series will never end.
          + `to_date` - Indicates the recurring series will end at a date specified in `event[until_date]`.
    + `event[repeat_every]` (number) - Repeats by the number of units given by the recurring type.
    + `event[until_date]`: dd/mm/yyyy, mm/dd/yyyy, dd.mm.yyyy, yyyy-mm-dd (string)

        Repeats until the specified date.

    + `event[repeat_by]`: 2,4,7 (string)

        Repeats by the days in a week (1-7 representing Monday to Sunday), separated by a delimiter ",".

+ Request With no recurrence (application/json)

        {
            "event[name]": "My first event!!!",
            "event[all_day]": true,
            "event[date_start]": "07/11/2017",
            "event[date_finish]": "07/11/2017",
            "event[time_start]": "12:00am",
            "event[time_finish]": "12:00am"
        }

+ Response 201 (application/json)

        {
            "events": {
                "id": 1,
                "name": "My first event!!!",
                "description": "",
                "where": "",
                "all_day": true,
                "recurring_type": "not_repeat",
                "my_note": null,
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-11-07T12:00:00.000Z",
                "utc_finish": "2017-11-07T13:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1508398190
            }
        }

+ Request With recurrence (application/json)

        {
            "event[name]": "My first recurrence",
            "event[date_start]": "07/11/2017",
            "event[time_start]": "8:00am",
            "event[date_finish]": "07/11/2017",
            "event[time_finish]": "9:00am",
            "event[recurring_type]": "weekly",
            "event[until]": "never",
            "event[repeat_every]": 1,
            "event[until_date]": "",
            "event[where]": "",
            "event[description]": "",
            "event[repeat_by]": 2,
            "event[all_day]": false
        }

+ Response 201 (application/json)

        {
            "events": [
                {
                    "id": 65,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": "2017-11-08T08:30:00.000Z",
                    "utc_old_finish": "2017-11-08T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 66,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-15T08:30:00.000Z",
                    "utc_finish": "2017-11-15T09:30:00.000Z",
                    "utc_old_start": "2017-11-15T08:30:00.000Z",
                    "utc_old_finish": "2017-11-15T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 67,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-22T08:30:00.000Z",
                    "utc_finish": "2017-11-22T09:30:00.000Z",
                    "utc_old_start": "2017-11-22T08:30:00.000Z",
                    "utc_old_finish": "2017-11-22T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 68,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-29T08:30:00.000Z",
                    "utc_finish": "2017-11-29T09:30:00.000Z",
                    "utc_old_start": "2017-11-29T08:30:00.000Z",
                    "utc_old_finish": "2017-11-29T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 69,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-06T08:30:00.000Z",
                    "utc_finish": "2017-12-06T09:30:00.000Z",
                    "utc_old_start": "2017-12-06T08:30:00.000Z",
                    "utc_old_finish": "2017-12-06T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                },
                {
                    "id": 70,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 64,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 64,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-13T08:30:00.000Z",
                    "utc_finish": "2017-12-13T09:30:00.000Z",
                    "utc_old_start": "2017-12-13T08:30:00.000Z",
                    "utc_old_finish": "2017-12-13T09:30:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561}],
                    "head_event": {
                    "id": 64,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": true,
                    "head_id": null,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-08T08:30:00.000Z",
                    "utc_finish": "2017-11-08T09:30:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508400561
                }
            ]
        }


### Event [/calendar/calendar/{calendar_id}/event/{event_id}]

#### Retrieve an event [GET]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.
    + `event_id` (number, required) - Id of the event.

+ Request (application/json)

        {}

+ Response 200 (application/json)

        {
            "filter": {
                "enabled": [7],
                "userSetting": [0]
            },
            "cal_info": [
                {
                    "id": 7,
                    "owner_type": "User",
                    "name": "Test personal calendar",
                    "owner_id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "owner_name": "Personal",
                    "display_name": "Test personal calendar (Personal)",
                    "can_manage": true,
                    "can_create_event": true
                }
            ],
            "spaces_permission": {
                "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92": true,
                "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79": true
            },
            "event": {
                "id": 174,
                "name": "Test event",
                "description": "",
                "where": "",
                "all_day": true,
                "recurring_type": "not_repeat",
                "my_note": null,
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-10-29T12:00:00.000Z",
                "utc_finish": "2017-10-29T13:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1509012877
            },
            "head_event": null,
            "recurring": []
        }

#### Update an event [PUT]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.
    + `event_id` (number, required) - Id of the event.

+ Attributes
    + `event[future]` (boolean) - Whether to update events in the series from this event on.
    + `event[all]` (boolean) - Whether to update the entire series.
    + `event[name]` (string) -  Name of the event.
    + `event[all_day]` (boolean) - Whether the event is an all-day event.
    + `event[date_start]` (string, required) - The start date of the event.
    + `event[date_finish]` (string, required) - The finish date of the event.
    + `event[time_start]` (string, required) - The start time of the event.
    + `event[time_finish]` (string, required) - The finish time of the event.
    + `event[where]` (string) - The location where the event happens.
    + `event[description]` (string) - The description of the event.
    + `event[recurring_type]` (enum[string]) - The recurring type of the event (absence means `not_repeat`).
        + members
            + `not_repeat`
            + `daily`
            + `weekly`
            + `monthly`
            + `yearly`
            + `weekday`
            + `mo_we_fr`
            + `tu_th`
    + `event[until]` (enum[string])
        + members
          + `never` - Indicates the recurring series will never end.
          + `to_date` - Indicates the recurring series will end at a date specified in `event[until_date]`.
    + `event[repeat_every]` (number) - Repeats by the number of units given by the recurring type.
    + `event[until_date]`: dd/mm/yyyy, mm/dd/yyyy, dd.mm.yyyy, yyyy-mm-dd (string)

        Repeats until the specified date.

    + `event[repeat_by]`: 2,4,7 (string)

        Repeats by the days in a week (1-7 representing Monday to Sunday), separated by a delimiter ",".

+ Request With no recurrence (application/json)

        {
            "event[name]": "My first event!!! (Edited)",
            "event[time_start]": "12:00pm",
            "event[time_finish]": "1:00pm",
            "event[until]": "never",
            "event[repeat_every]": 1,
            "event[until_date]": "",
            "event[invite_others]": "",
            "event[see_guest_list]": "",
            "event[my_note]": "",
            "event[repeat_by]": ""
        }

+ Response 200 (application/json)

        {
            "events":[
                {
                    "id": 1,
                    "name": "My first event!!! (Edited)",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "recurring_type": "not_repeat",
                    "my_note": "",
                    "old_head_id": null,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-07T12:00:00.000Z",
                    "utc_finish": "2017-11-07T13:00:00.000Z",
                    "utc_old_start": null,
                    "utc_old_finish": null,
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508401619
                }
            ]
        }

+ Request With recurrence and for future (application/json)

        {
            "event[date_start]": "22/11/2017",
            "event[time_start]": "",
            "event[date_finish]": "22/11/2017",
            "event[time_finish]": "",
            "event[all_day]": true,
            "event[repeat_every]": 1,
            "event[until_date]": "13/12/2017",
            "event[future]": true
        }

+ Response 200 (application/json)

        {
            "events": [
                {
                    "id": 71,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-22T12:00:00.000Z",
                    "utc_finish": "2017-11-22T13:00:00.000Z",
                    "utc_old_start": "2017-11-22T12:00:00.000Z",
                    "utc_old_finish": "2017-11-22T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                },
                {
                    "id": 72,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-29T12:00:00.000Z",
                    "utc_finish": "2017-11-29T13:00:00.000Z",
                    "utc_old_start": "2017-11-29T12:00:00.000Z",
                    "utc_old_finish": "2017-11-29T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                },
                {
                    "id": 73,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-06T12:00:00.000Z",
                    "utc_finish": "2017-12-06T13:00:00.000Z",
                    "utc_old_start": "2017-12-06T12:00:00.000Z",
                    "utc_old_finish": "2017-12-06T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510},
                {
                    "id": 74,
                    "name": "Recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": true,
                    "head_flag": false,
                    "head_id": 67,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-13",
                    "repeat_every": 1,
                    "repeat_by": "3",
                    "my_note": "",
                    "old_head_id": 67,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-13T12:00:00.000Z",
                    "utc_finish": "2017-12-13T13:00:00.000Z",
                    "utc_old_start": "2017-12-13T12:00:00.000Z",
                    "utc_old_finish": "2017-12-13T13:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508402510
                }
            ],
            "head_event":    {
                "id": 67,
                "name": "Recurrent event",
                "description": "",
                "where": "",
                "all_day": true,
                "head_flag": true,
                "head_id": null,
                "recurring_type": "weekly",
                "until": "to_date",
                "until_date": "2017-12-13",
                "repeat_every": 1,
                "repeat_by": "3",
                "my_note": "",
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-11-22T12:00:00.000Z",
                "utc_finish": "2017-11-22T13:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1508402510
            }
        }

+ Request With recurrence and for the entire series (application/json)

        {
            "event[date_start]": "16/11/2017",
            "event[time_start]": "10:00am",
            "event[date_finish]": "16/11/2017",
            "event[time_finish]": "11:00am",
            "event[repeat_every]": 1,
            "event[until_date]": "14/12/2017",
            "event[invite_others]": "",
            "event[see_guest_list]": "",
            "event[all_day]": false,
            "event[all]": true
        }

+ Response 200 (application/json)

        {
            "events":[
                {
                    "id": 82,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-09T00:00:00.000Z",
                    "utc_finish": "2017-11-09T00:00:00.000Z",
                    "utc_old_start": "2017-11-09T00:00:00.000Z",
                    "utc_old_finish": "2017-11-09T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 83,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-16T00:00:00.000Z",
                    "utc_finish": "2017-11-16T00:00:00.000Z",
                    "utc_old_start": "2017-11-16T00:00:00.000Z",
                    "utc_old_finish": "2017-11-16T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 84,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-23T00:00:00.000Z",
                    "utc_finish": "2017-11-23T00:00:00.000Z",
                    "utc_old_start": "2017-11-23T00:00:00.000Z",
                    "utc_old_finish": "2017-11-23T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 85,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-11-30T00:00:00.000Z",
                    "utc_finish": "2017-11-30T00:00:00.000Z",
                    "utc_old_start": "2017-11-30T00:00:00.000Z",
                    "utc_old_finish": "2017-11-30T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 86,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-07T00:00:00.000Z",
                    "utc_finish": "2017-12-07T00:00:00.000Z",
                    "utc_old_start": "2017-12-07T00:00:00.000Z",
                    "utc_old_finish": "2017-12-07T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                },
                {
                    "id": 87,
                    "name": "Another recurrent event",
                    "description": "",
                    "where": "",
                    "all_day": false,
                    "head_flag": false,
                    "head_id": 75,
                    "recurring_type": "weekly",
                    "until": "to_date",
                    "until_date": "2017-12-14",
                    "repeat_every": 1,
                    "repeat_by": "4",
                    "my_note": "",
                    "old_head_id": 75,
                    "calendar_id": 7,
                    "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "utc_start": "2017-12-14T00:00:00.000Z",
                    "utc_finish": "2017-12-14T00:00:00.000Z",
                    "utc_old_start": "2017-12-14T00:00:00.000Z",
                    "utc_old_finish": "2017-12-14T00:00:00.000Z",
                    "can_save": true,
                    "can_delete": true,
                    "timestamp": 1508406018
                }
            ],
            "head_event":{
                "id": 75,
                "name": "Another recurrent event",
                "description": "",
                "where": "",
                "all_day": false,
                "head_flag": true,
                "head_id": null,
                "recurring_type": "weekly",
                "until": "to_date",
                "until_date": "2017-12-14",
                "repeat_every": 1,
                "repeat_by": "4",
                "my_note": "",
                "old_head_id": null,
                "calendar_id": 7,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "utc_start": "2017-11-09T00:00:00.000Z",
                "utc_finish": "2017-11-09T00:00:00.000Z",
                "utc_old_start": null,
                "utc_old_finish": null,
                "can_save": true,
                "can_delete": true,
                "timestamp": 1508406018
            },
            "head_id": 75,
            "first_entity": 82,
            "last_entity": 87
        }

#### Delete an event [DELETE]

+ Parameters
    + `calendar_id` (number, required) - Id of the calendar.
    + `event_id` (number, required) - Id of the event.

+ Attributes
    + `after` (boolean) - Whether to delete event in the series from this event on.
    + `all` (boolean) - Whether to delete the entire series.

+ Request With no recurrence (application/json)

        {}

+ Response 200 (application/json)

        {}

+ Request With recurrence and for future (application/json)

        {
            "after": true
        }

+ Response 200 (application/json)

        {
            "head_id": 90,
            "first_entity": 91,
            "last_entity": 91
        }

+ Request With recurrence and for future (application/json)

        {
            "after": true
        }

+ Response 200 (application/json)

        {
            "head_id": 90,
            "first_entity": 91,
            "last_entity": 91
        }


+ Request With recurrence and for the entire series (application/json)

        {
            "all": true
        }

+ Response 200 (application/json)

        {}
## Group Wiki

### Wikis [/spaces/{space_id}/wiki/wiki_pages]

#### Retrieve a wiki collection [GET]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.

+ Attributes
    + `direction` (enum[string]) - Defines how wikis are sorted in the collection.
        + members
            + `desc`
            + `asc`
    + `order_by` (enum[string]) - Defines of which property the collection will sort.
        + members
            + `updated_at`
    + `start` (number) - Fetch the collection starting from which wiki.
    + `length` (number) - Fetch how many wikis at once.
    + `s` (string) - 

+ Request (application/json)

        {
            "direction": "desc",
            "order_by": "updated_at",
            "start": 0,
            "length": 25,
            "s": ""
        }

+ Response 200 (application/json)

        {
            "requested_at": 1127761243,
            "total": 2,
            "indices": {
                "0": 39,
                "1": 38
            },
            "objects": [{
                "id": 38,
                "name": "My new wiki edited",
                "address": "my-new-wiki",
                "created_at": "2017-10-30T07:00:25.000+00:00",
                "updated_at": "2017-10-30T07:09:00.000+00:00",
                "version": null,
                "allow_attachments": false,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents": [{
                        "insert": "\n"
                    }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.000+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            },
            {
                "id": 39,
                "name": "The next wiki",
                "address": "the-next-wiki",
                "created_at": "2017-10-30T07:30:03.000+00:00",
                "updated_at": "2017-10-30T07:30:03.000+00:00",
                "version": null,
                "allow_attachments": true,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents": [{
                        "insert": "\n"
                    }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:30:03.000+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            }],
            "tags": {
                "selected_tags": [],
                "related_tags": [],
                "all_tags": []
            },
            "allow_create": true,
            "recent_activity": [{
                "date": "Monday, October 30, 2017",
                "links": [{
                    "id": 39,
                    "name": "The next wiki",
                    "path": "the-next-wiki"
                },
                {
                    "id": 38,
                    "name": "My new wiki edited",
                    "path": "my-new-wiki"
                }]
            }]
        }

#### Create a wiki [POST]


+ Attributes
    + `wiki_page[name]` (string) - The name of the wiki page.
    + `wiki_page[tag_list]` (string) - The list of tags of the wiki page.

+ Request (application/json)

        {
            "wiki_page[name]": "My new wiki",
            "wiki_page[tag_list]": ""
        }

+ Response 201 (application/json)

        {
            "wiki_page":  {
                "id": 38,
                "name": "My new wiki",
                "address": "my-new-wiki",
                "created_at": "2017-10-30T07:00:25.000+00:00",
                "updated_at": "2017-10-30T07:00:25.000+00:00",
                "version": null,
                "allow_attachments": false,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents":  [{"insert": "\n"}],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.719+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user":  {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            },
            "tags": {
                "selected_tags": [],
                "related_tags": [],
                "all_tags": []},
                "allow_create": true,
                "recent_activity": [{
                    "date": "Monday, October 30, 2017",
                    "links": [{
                        "id": 38,
                        "name": "My new wiki",
                        "path": "my-new-wiki"
                    }]
                }]
            }
        }

### Wiki [/spaces/{space_id}/wiki/wiki/{address}]

#### Update a wiki [PUT]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `address` (string) - The value of the address attribute of the wiki.

+ Attributes
    + `wiki_page[name]` (string)
    + `wiki_page[tag_list]` (string)

+ Request (application/json)

        {
            "wiki_page[name]": "My new wiki edited"
        }

+ Response 200 (application/json)

        {
            "wiki_page":  {
                "id": 38,
                "name": "My new wiki edited",
                "address": "my-new-wiki",
                "created_at": "2017-10-30T07:00:25.000+00:00",
                "updated_at": "2017-10-30T07:09:00.719+00:00",
                "version": null,
                "allow_attachments": false,
                "allow_comments": true,
                "revision": 0,
                "tag_list": [],
                "space_id": "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                "live_edit": {
                    "revision": 0,
                    "quill_contents":  [{ "insert": "\n" }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.719+00:00"
                },
                "attachments_listed": [],
                "is_new_record": false,
                "rendered_created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "rendered_updated_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "allow_create": true,
                "allow_edit": true,
                "allow_update": true,
                "allow_delete": true,
                "allow_comment": true,
                "allow_manage_permissions": true,
                "current_user": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "encoded_rendered_content": "",
                "comments": [],
                "user":  {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                },
                "updater": {
                    "id": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                    "name": "Jasmine Green",
                    "connected": true,
                    "mutual_spaces": [
                        "326ee7a7-2c7c-4af0-9eb6-3f79b90dae92",
                        "b1d9b3bf-6cef-44c3-9382-4b32f7f2cd79"
                    ]
                }
            },
            "tags": {
                "selected_tags": [],
                "related_tags": [],
                "all_tags": []},
                "allow_create": true,
                "recent_activity": [{
                    "date": "Monday, October 30, 2017",
                    "links": [{
                        "id": 38,
                        "name": "My new wiki edited",
                        "path": "my-new-wiki"
                    }]
                }]
            }
        }

#### Delete a wiki [DELETE]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `address` (string) - The value of the address attribute of the wiki.

+ Request (application/json)

        {}

+ Response 200 (application/json)

        {}

### Live editors [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/live_editors]

#### Create a live editor [POST]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (string) - The id of the wiki page.

+ Attributes

+ Request (application/json)

        {}

+ Response 200 (application/json)

        {
            "live_editor": {
                "id": 265,
                "wiki_page_id": 38,
                "created_at": "2017-10-30T09:30:24.915+00:00",
                "updated_at": "2017-10-30T09:30:24.915+00:00",
                "name": "Jasmine Green"
            },
            "wiki_page": {
                "live_edit": {
                    "revision": 0,
                    "quill_contents": [{ "insert":"\n" }],
                    "name": "Jasmine Green",
                    "time": "2017-10-30T07:09:00.000+00:00"
                }
            }
        }

### Live editor [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/live_editors/{live_editor_id}]

#### Update a live editor [PUT]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (number) - The id of the wiki page.
    + `live_editor_id` (number) - The id of the wiki live editor.

+ Attributes
    + `live_editor[updated_at]`: null (string, fixed)

+ Request (application/json)

        {
            "live_editor[updated_at]": null
        }

+ Response 200 (application/json)

        {
            "live_editor": {
                "id": 265,
                "wiki_page_id": 38,
                "created_at": "2017-10-30T09:30:24.000+00:00",
                "updated_at": "2017-10-30T09:43:33.516+00:00",
                "name": "Jasmine Green"
            }
        }

### Increments [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/increments]

#### Create an increment [POST]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (number) - The id of the wiki page.

+ Attributes
    + `increment[delta]` (object) - The Quilljs delta object. See https://github.com/quilljs/delta for details.
    + `increment[revision]` - The client's revision of the document.

+ Request (application/json)

        {
            "increment[delta]": { "ops": [{ "insert": "a" }] },
            "increment[revision]": 0
        }

+ Response 200 (application/json)

        {
            "increment":{
                "id": "85833009-5d9f-4fd7-bde6-1cf07895b2c1",
                "wiki_page_id": 38,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "live_editor_id": 265,
                "created_at": "2017-10-30T09:48:39.991+00:00",
                "updated_at": "2017-10-30T09:48:39.991+00:00",
                "status": 0,
                "revision": 0
            }
        }


### Increment [/spaces/{space_id}/wiki/wiki_pages/{wiki_page_id}/increments/#{increment_id}]

#### Retrieve an increment [GET]

+ Parameters
    + `space_id` (uuid) - The space identifier of the wiki collection.
    + `wiki_page_id` (number) - The id of the wiki page.
    + `increment_id` (uuid) - The id of the wiki increment.

+ Attributes
    + `revision` (number) - The client's revision of the document. The API will respond with the lastest delta if the increment is success.

+ Request (application/json)

        {
            revision: 1
        }

+ Response 200 (application/json)

        {
            "increment": {
                "id": "2a12a905-16d8-43c5-93eb-b1f4a7826ce0",
                "wiki_page_id": 38,
                "created_by": "bdc6aced-f7d0-465d-9d8b-6629d1cfd150",
                "live_editor_id": 265,
                "created_at": "2017-10-30T09:48:39.000+00:00",
                "updated_at": "2017-10-30T09:48:39.000+00:00",
                "status": 2,
                "revision": 1
            },
            "delta": [
                {"retain": 1},
                {"insert": "b"}
            ]
        }


## Group File

### Upload a file [POST /spaces/{space_id}/file/files/upload]

+ Parameters
    + `space_id` (uuid) - UUID of space

+ Request (application/json)
    + Attributes (object)
        + `file_info` (object)
            + `attachment` (required, array) - array of files to be uploaded
            + `description`: This is an important file (optional, string) - description of the file
            + `tag_list`: tag1,tag2 (optional, string) - list of tags separated by commas

+ Response 200 (application/json)
    + Attributes (object)
        + `attachment` (File)

+ Response 422 (application/json)
    + Attributes (object)
        + `attachment_errors` (string) - the error message

### List files [GET /spaces/{space_id}/file/files]

+ Parameters
    + `space_id` (uuid) - UUID of space

+ Request (application/json)
    + Attributes (object)
        + `order_by`: date (optional, enum[string]) - sort order of files
            + Members
                + name
                + size
                + date
                + author
                + file_type
        + `direction`: desc (optional, enum[string]) - sort direction of files
            + Members
                + asc
                + desc
        + `start`: 0 (optional, number) - starting index of file collection, default: 0
        + `length`: 100 (optional, number) - maximum size of collection, default: 100

+ Response 200 (application/json)
    + Attributes (object)
        + `total` (number) - total number of files
        + `indices` (object) - hash of index-file_id
        + `objects` (array[File]) - array of file attributes
        + `tags` (object) - hash of tags
            + `all_tags` (array) - the array of all tags in space
            + `related_tags` (array) - array of tags related to the current file
            + `selected_tags` (array) - array of selected tags
        + `recent_activity` (array) - array of recent activities of files
            + `date` (string) - the date of the activities in format `%A, %B %d, %Y`
            + `links` (array) - the array of recent updated files inside the grouped date
                + (object)
                    + `id` (number) - the ID of the file
                    + `name` (string) - the name of the file
                    + `path` (string) - the relative path of the link to the file
        + `permissions` (object) - the hash of the permissions of the user
            + `allow_create` (boolean) - the permission of the user to create a file
            + `allow_delete` (boolean) - the permission of the user to delete a file
            + `allow_download` (boolean) - the permission of the user to download a file
            + `allow_edit` (boolean) - the permission of the user to edit a file
            + `allow_mass_actions` (boolean) - the permission of the user to perform mass actions on files


### File [/spaces/{space_id}/file/files/{file_id}]

+ Parameters
    + `space_id` (uuid) - UUID of space
    + `file_id` (id) - ID of file

#### Show a file [GET]

+ Request (text/html)

+ Response 200

    - Redirects to download link of the file
    + Body

+ Request (application/json)

+ Response 200 (application/json)

    - This returns a hash of file indices and an array of objects of files

    + Attributes (object)
        + `file` (File)

#### Update a file [PUT]

+ Request (application/json)
    + Attributes (object)
        + `file_info` (object)
            + `name` (string, optional) - file name
            + `description` (string, optional) - brief description of the file
            + `tag_list` (string, optional) - list of tags separated by commas

+ Response 200 (application/json)

    - This returns a hash of file attributes, tags of files and recent 
      activities of files.

    + Attributes (object)
        + `file` (File)
        + `tags` (object)
            + `all_tags` (array[string]) - the array of all tags in space
            + `related_tags` (array[string]) - array of tags related to current file
            + `selected_tags` (array[string]) - array of the selected tags
        + `recent_activity` (array[object]) - array of recent activities of files
            + `date` (DatetimeString) - the date of the activities in format "%A, %B %d, %Y"
            + `links` (array) - the array of recent updated files inside the grouped date
                + (object)
                    + `id` (number) - the ID of the file
                    + `name` (string) - the name of the file
                    + `path` (string) - the relative path of the link to the file

+ Response 422 (application/json)
    - hash of errors

    + Attributes (object)

#### Delete a file [DELETE /spaces/{space_id}/file/files/{file_ids}]

+ Parameters
    + `file_ids` (id) - ID of a file or multiple IDs separated by commas

+ Request (application/json)

+ Response 200 (application/json)

    - This returns a hash of statistics of deleting the files.

    + Attributes (object)
        + `message` (object)
            + `records_name` (string) - name of record
            + `action_name` (string) - name of action
            + `ok_count` (number) - number of successful files, only returned when deleting more than one file
            + `total_count` (number) - number of total files, only returned when files failed to delete

#### Get a file icon [GET /spaces/{space_id}/file/files/{file_id}/icon]

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + `icon_processed` (boolean) - the file icon has been processed or not
        + `icon_path` (string) - path of the file icon

#### Download a file [GET /spaces/{space_id}/file/files/{file_ids}/download]

+ Parameters
    + `file_ids` (id) - ID of a file or multiple IDs separated by commas

+ Response 200

    - Redirects to download link of the selected files
    + Body

#### Show a file version [GET /spaces/{space_id}/file/files/{file_id}/versions/{file_version_id}]

+ Parameters
    + `file_version_id` (id) - ID of file

+ Response 200

    - Redirects to download link of the version of the file
    + Body

#### Upload a file version [POST /spaces/{space_id}/file/files/{file_id}/versions/upload]

+ Request (application/json)
    + Attributes (object)
        + `file_info_version` (object)
            + `attachment` (required) - the file to be uploaded as a new version
            + `description` (string, optional) - description of the new file version

+ Response 200 (application/json)
    + Attributes (object)
        + `attachment` (FileVersion)

+ Response 422 (application/json)
    + Attributes (object)
        + `attachment_errors` (string) - error message

#### Revert a file version [PUT /spaces/{space_id}/file/files/{file_id}/versions/{file_version_id}/revert]

    -  `GET` would also work

+ Parameters
    + `file_version_id` (id) - ID of file

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (File)
## Group Invitation

### Invitation to Ribose [/invitations/to_new_member/{invitation_id}]

+ Parameters
    + `invitation_id` (id)

#### Resending [POST /invitations/to_new_member/{invitation_id}/resend]

    - inviter-only action
    - time throttled
    - only applicable to invitations sent to non-member emails

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)

        + success: true (boolean)

+ Response 422 (application/json)

    + Attributes (object)

        + error_message: "Relax. You'll be able to resend the invitation 24 hours after your previous attempt." (string) - the error message


#### Creating [POST /invitations/to_new_member/mass_create]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `emails` (array[email]) - must specify at least either `emails`
            + `body` (string) - Body of invitation message to the invitees

+ Response 422 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        * `invitations` (object)
            * `success` (object)
                * `emails` (object)
                    * *user@example.com (email)* (InvitationToIndigo) - an object indexed by Email
                * `user_ids` (object)
            * `errors` (object)
                * `emails`
                    * *user@example.com (email)* (array[string]) - Array of error strings indexed by Email
                * `user_ids` (object) - empty


+ Response 403 (application/json)

#### Retrieving [GET /invitations/to_new_member{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s` (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    * Attributes (object)
        * `requested_at` (number) - token representing a timestamp of this request
        * `rejected_ids` (array[id]) - rejected invitation IDs
        * `total` (number) - total number of objects
        * `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
            * *3 (string)* (id) - integer order on current page => invitation ID
        * `objects` (object)
            * *123456 (string)* (object) - an object indexed by invitation ID
                * `id` (id) - invitation
                * `email` (email, nullable) - invitee email
                * `body`  (string, nullable) - Invitation body message
                * `created_at` (DatetimeString) - invitation creation
                * `state` (enum[number])
                    * Members
                        * 0 - Pending
                        * 1 - Accepted
                        * 2 - Rejected
                        * 3 - Maybe
                        * 100 - Invalid
                * `type`: Invitation::ToIndigo (string, fixed)
                * `updated_at` (DatetimeString)
                * `invitee` (InviterInvitee)
                * `inviter` (InviterInvitee)

+ Response 403 (application/json)

+ Response 422 (application/json)


### Invitation to connection [/invitations/to_connection/{invitation_id}]

+ Parameters
    + `invitation_id` (id)

#### Deleting / Cancelling [DELETE]

    - an inviter-only action

+ Request (application/json)

+ Response 200 (application/json)

    + Body

            {}

+ Response 422 (application/json)

+ Response 403 (application/json)

#### Accepting / Rejecting [PUT]

    - an invitee-only action

+ Request (application/json)

    + Attributes (object)
        + `invitation` (object)
            + `state` (enum[number])
                * Members
                    * 1 - Accepting
                    * 2 - Rejecting (ignoring)

+ Response 200 (application/json)
    * Attributes (InvitationToConnection)

+ Response 403 (application/json)

+ Response 422 (application/json)


#### Retrieving [GET /invitations/to_connection{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s` (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    * Attributes (object)
        * `requested_at` (number) - token representing a timestamp of this request
        * `rejected_ids` (array[id]) - rejected invitation IDs
        * `total` (number) - total number of objects
        * `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
            * *3 (string)* (id) - integer order on current page => invitation ID
        * `objects` (object)
            * *123456 (string)* (object) - an object indexed by invitation ID
                * `id` (id) - invitation
                * `email` (email, nullable) - invitee email
                * `body`  (string, nullable) - Invitation body message
                * `created_at` (DatetimeString) - invitation creation
                * `state` (enum[number])
                    * Members
                        * 0 - Pending
                        * 1 - Accepted
                        * 2 - Rejected
                        * 3 - Maybe
                        * 100 - Invalid
                * `type`: Invitation::ToConnection (string, fixed)
                * `updated_at` (DatetimeString)
                * `invitee` (InviterInvitee)
                * `inviter` (InviterInvitee)

+ Response 403 (application/json)

+ Response 422 (application/json)

#### Creating [POST /invitations/to_connection/mass_create]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `emails` (array[email]) - must specify at least either `emails` / `user_ids`
            + `user_ids` (array[uuid]) - must specify at least either `emails` / `user_ids`
            + `body` (string) - Body of invitation message to the invitees

+ Response 422 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        * `invitations` (object)
            * `success` (object)
                * `emails` (object)
                    * *user@example.com (email)* (InvitationToConnection) - an object indexed by Email
                * `user_ids` (object)
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (InvitationToConnection) - an object indexed by User UUIDs
            * `errors` (object)
                * `emails`
                    * *user@example.com (email)* (array[string]) - Array of error strings indexed by Email
                * `user_ids`
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (array[string]) - Array of error strings indexed by User UUIDs

+ Response 403 (application/json)


### Invitation to Space [/invitations/to_space/{invitation_id}]

+ Parameters
    + `invitation_id` (id)


#### Deleting a.k.a. Cancelling [DELETE]

    - an inviter-only action

+ Request (application/json)

+ Response 200 (application/json)

        * {}

+ Response 403 (application/json)

+ Response 422 (application/json)

#### Accepting / Rejecting [PUT]

    - an invitee-only action

+ Request (application/json)

    + Attributes (object)
        + `invitation` (object)
            + `state` (enum[number])
                * Members
                    * 1 - Accepting
                    * 2 - Rejecting (ignoring)


+ Response 200 (application/json)

    + Attributes (object)

        * `to_space` (InvitationToSpace)

#### Updating pre-assigned role [PUT /invitations/to_space/{invitation_id}]

    - inviter-only action

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `role_id` (id) - Space Role ID

+ Response 200 (application/json)

    + Attributes (object)

        * `to_space` (InvitationToSpace)


#### Retrieving [GET /invitations/to_space{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s` (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    * Attributes (InvitationsToSpace)

+ Response 403 (application/json)

+ Response 422 (application/json)

#### Mass creating [POST /spaces/{space_id}/invitations/to_space/mass_create]

+ Parameters
    + `space_id` (uuid) - UUID of the Space under which invitations are to be created

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `emails` (array[email])
            + `user_ids` (array[uuid])
            + `role_ids` (object)
                + *271A3A83-EA0C-450D-BAFB-51ED42C4CF10 (uuid)* (id) - Map from email / user ID to Space Role ID
                + *invitee@example.com (email)* (id) - Map from email / user ID to Space Role ID
            + `space_id` (uuid) - Space (same as :space_id)
            + `body` - Body of invitation message to the invitees

+ Response 200 (application/json)

    + Attributes (object)
        * `invitations` (object)
            * `success` (object)
                * `emails` (object)
                    * *user@example.com (email)* (object) - an object indexed by Email
                        * Invitee (InviterInvitee)
                * `user_ids` (object)
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (object) - an object indexed by User UUIDs
                        * Invitee (InviterInvitee)
            * `errors` (object)
                * `emails`
                    * *user@example.com (email)* (array[string]) - Array of error strings indexed by Email
                * `user_ids`
                    * *2d6696ad-f8ec-42a2-80c4-1ebd8196ce9c (uuid)* (object) - Array of error strings indexed by User UUIDs

#### Creating [POST /invitations/to_space]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `state`: 0 (number, fixed)
            + `type`:  Invitation::ToSpace (string, fixed)
            + `space_id` (uuid) - Space ID
            + `body` (string) - Body of invitation message to the invitees
            + `invitee_id` (uuid) - invitee user ID

+ Response 200 (application/json)

    + Attributes (object)

        * `to_space` (InvitationToSpace)

### Join Space Request [/invitations/join_space_request/{invitation_id}]

+ Parameters
    + `invitation_id` (id)


#### Accepting / Rejecting a.k.a Ignoring [PUT]

    - An invitee-only action

+ Request (application/json)

    + Attributes (object)
        + `invitation` (object)
            + `state` (enum[number])
                * Members
                    * 1 - Accepting
                    * 2 - Rejecting (ignoring)

+ Response 200 (application/json)

    + Attributes (object)

        * `join_space_request` (InvitationToSpace)

#### Updating pre-assigned role [PUT]

    - A Space Admin-only action

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `role_id` (id) - Space Role Id

+ Response 200 (application/json)

    + Attributes (object)

        * `join_space_request` (InvitationToSpace)

#### Retrieving [GET /invitations/join_space_request{?view,start,length,s,order_by,direction}]

+ Parameters

    + `view`: received (enum[string]) - which view to retrieve
        * Members
            * received
            * sent
    + `length`: 10 (number, optional) - how many objects to return (default = 10). Optional
    + `start`: 0 (number, optional) - pagination starting point (default = 0). Optional
    + `order_by` (enum[string], optional) - pagination sorting attribute. Optional
        * Members
            * created_at
            * updated_at
    + `direction` (enum[string], optional) - pagination sorting direction. Optional
        * Members
            * desc
            * asc
    + `s` (string) - pagination synchronization string

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (JoinSpaceRequests)

#### Creating [POST /invitations/join_space_request]

+ Request (application/json)

    + Attributes (object)

        + `invitation` (object)
            + `state`: 0 (number, fixed)
            + `type`:  Invitation::JoinSpaceRequest (string, fixed)
            + `space_id` (uuid) - Space ID
            + `body` (string) - Body of invitation message to the invitees

+ Response 200 (application/json)

    + Attributes (JoinSpaceRequest)
## Group Settings

### General Settings [/settings/general]

General settings are a collection of endpoints that deal with fetching user information about the current session, as well as performing operations related to the account such as facilitating password and email change requests.

#### Get Info [GET /settings/general/info]

Fetches some basic information about the current user and session.

+ Response 200 (application/json)

        {
          "created_at":"2017-11-01T03:40:32.000+00:00",
          "email_change_request":null,
          "authentication_token":"mhwBTBYK3Vd6YgU8c9Gb",
          "question":"",
          "concurrent":[],
          "last_activity": {
            "id":18,
            "remote_ip":"127.0.0.1",
            "failed_login":null,
            "session_id":"4f5c4f5d78d294fd0808daee456ec684",
            "created_at":"2017-11-02T06:06:26.000+00:00",
            "updated_at":"2017-11-02T07:23:30.000+00:00",
            "expired":false,
            "platform":"Macintosh",
            "browser":"Chrome",
            "user_id":"5b3b34d4-1c19-4d08-b2dd-493e684a2b8c"
          }
        }

#### Get Activities [GET /settings/general/activities]

Fetches the user's latest network activities (up to 20).

+ Response 200 (application/json)

        {
          "current_remote_ip":"127.0.0.1",
          "activities": [
            {
              "remote_ip":"127.0.0.1",
              "created_at":"2017-11-02T06:06:26.000+00:00",
              "updated_at":"2017-11-02T08:34:30.000+00:00",
              "failed_login":null,
              "is_current_session":true
            },
            {
              "remote_ip":"127.0.0.1",
              "created_at":"2017-11-01T03:40:33.000+00:00",
              "updated_at":"2017-11-01T08:39:07.000+00:00",
              "failed_login":null,
              "is_current_session":false
            }
          ],
          "concurrent":[]
        }

#### Regenerate Token [GET /settings/general/regenerate_token]

Creates a new API token for the user and returns it. Current password must be sent under 'password_confirmation' to authorize action.

+ Response 200 (application/json)

        {
          "token":"mhwBTBYK3Vd6YgU8c9Gb"
        }

#### Change Password [POST /settings/general/change_password]

Changes the user's password. Current password must be sent under 'password_confirmation' to authorize action.

+ Attributes
    + `password_confirmation` (string) - current password
    + `user` (object)
      + `password` (string) - new password

+ Response 201 (application/json)

        {
        }

#### Change Secret Question [POST /settings/general/change_secret_question]

Changes the user's secret question and answer. Current password must be sent under 'password_confirmation' to authorize action.

+ Attributes
    + `password_confirmation` (string) - current password
    + `user` (object)
      + `question` (string) - new secret question
      + `answer` (string) - answer to the new secret question

+ Response 201 (application/json)

        {
        }

#### Change Email [POST /settings/general/change_email]

Sends a confirmation email to the submitted email address. If the activation link in the sent email is opened, The user's email will be successfully updated when the activation link. Current password must be sent under 'password_confirmation' to authorize action.

+ Attributes
    + `password_confirmation` (string) - current password
    + `user` (object)
      + `email` (string) - new address to send confirmation email to

+ Response 201 (application/json)

        {
        }

#### Resend Email Activation [POST /settings/general/resend_email_activation]

If there is a pending email change request for the user, this action will send an email with a new activation link to the pending email address. This action imposes a 12-hour minimum delay between emails, and will not resend if the last email was sent less than 12 hours ago.

+ Response 201 (application/json)

        {
        }

#### Discard Email Activation [POST /settings/general/reject_change]

If there is a pending email change request for the user, this action cancels that request.

+ Response 201 (application/json)

        {
        }

### Settings [/settings]

The non-general setting endpoints deal with remembering a user's preferences for how various parts of the Ribose platform should behave. The full list of setting types and the configurations they take are as follows:

**Setting::Personal** - affect site-wide behavior for the user
+ `help_getting_started` (boolean) - determines whether the user needs to go through the initial tutorial upon signing in. Starts as true in new user accounts, and later changes to false once the user has completed the tutorial.
+ `help_change_space_color` (boolean) - determines whether the tutorial on changing space color should be shown. Starts as true in new user accounts, and later changes to false once the user has completed the tutorial.
+ `chat_show_offline_users` (boolean) - sets whether the chat widget shows users who are offline. Default is true.
+ `chat_show_spaces` (boolean) - sets whether the Shared Spaces Indicator should be shown in chat. Default is false.
+ `chat_sound` (boolean) - sets whether a sound should play when the user receives a chat message. Default is true.
+ `theme_id` (number) - integer that references a Theme object id that the user has access to. Default is 1, the default Ribose theme.
+ `time_zone` (string) - sets the user's time zone. This configuration accepts any value defined by the public domain  IANA Time Zone Database (https://www.iana.org/time-zones). Default is "Etc/UTC".
+ `time_zone_autodetect` (string) - sets whether time zone should be automatically detected. Takes either "always" or "prompt". Default is "always".
+ `time_format` (string) - sets the format used to display time. Takes either "%I:%M%p" or "%H:%M". Default is "%I:%M%p".
+ `date_format` (string) - sets the format used to display dates. Only accepts values from "%d/%m/%Y", "%m/%d/%Y", "%d.%m.%Y", "%m.%d.%Y", or "%Y-%m-%d". Default is "%d/%m/%Y".
+ `block_concurrent_signin` (false) - sets whether the user's account is prevented from signing in concurrently from multiple devices. Default is false, which does allow concurrent sign in.
+ `connection_request_email` (boolean) - sets whether an email notification is sent when the user receives a connection request. Default is true.
+ `space_invitation_email` (boolean) - sets whether an email notification is sent when the user receives a space invitation. Default is true.
+ `connection_request_acceptance_email` (boolean) - sets whether an email notification is sent when someone accepts the user's connection request. Default is true.
+ `space_invitation_acceptance_email` (boolean) - sets whether an email notification is sent when someone accepts the user's space invitation. Default is true.
+ `inbox_message_email` (boolean) - sets whether an email notification is sent when the user receives an inbox message. Default is true.

**Setting::Space** - affect all members of a specific space; only accessible by admins or the owner
+ `email_notifications` (boolean) - determines whether space members are sent email notifications about activities in the space. Default is true.
+ `realtime_notifications` (boolean) - determines whether space members are sent realtime notifications about activities in the space. Default is true.

**Setting::UserSpace** - affect how a specific space behaves for the user (another user might have different settings for the same space)
+ `space_color` (string) - sets the color of the space's default avatar and some interface elements. Only accepts values from #E1EBE8, #D8E3EC, #EBE1E2, #E59C7D, #F2EFD1, DADBBC, #A3B7B9, or #C5C3B2. Default is #E1EBE8.
+ `email_notification_type` (number) - sets whether email notifications about activity in the space are sent to the user. Only accepts 0 for no notifications, or 2 for email notifications. Default is 2 which sends the email notifications.

**Setting::UserApp::Calendar** - affect how calendars behave for the user
+ `week_start_day` (integer) - integer representing the starting day of the week. Only accepts 0 to 6. Default is 1 which stands for Monday.
+ `show_weekends` (boolean) - determines whether weekends are shown in the calendar. Default is true.
+ `work_day_begin` (number) - integer representing the hour that the calendar will treat as the start of a work day. Only accepts numbers 0 to 23. Default is 9 which stands for 9 a.m.
+ `work_day_end` (number) - integer representing the hour that the calendar will treat as the end of a work day. Only accepts numbers 0 to 23. Default is 18 which stands for 6 p.m.
+ `weekends` (number) - array of integers representing days that the calendar will treat as weekends. Only accepts numbers 0 to 6. Default is [0, 6] which stands for Saturday & Sunday.
+ `calendars_disabled` (number) - array of calendar ids; events from calendars listed here will not be displayed. Default is an empty array.

**Setting::UserApp::Conversation**
+ `per_page` (number) - number of threads to display in each page when browsing the conversation section of spaces. Default is 50.

**Setting::UserApp::File**
+ `per_page` (number) - number of files to display in each page when browsing the file section of spaces. Default is 100.

**Setting::UserApp::Inbox**
+ `per_page` (number) - number of messages to display in each page when browsing the inbox. Default is 50.

**Setting::UserApp::People**
+ `per_page` (number) - number of . Default is 90.

**Setting::UserApp::Search**
+ `per_page` (number) - number of results to display in each page when searching. Default is 25.

**Setting::UserApp::Wiki**
+ `per_page` (number) - number of entries to display in each page when browsing space wikis. Default is 50.

**Setting::Widget::Notification**
+ `disabled_spaces` (string) - array of space ids; listed Spaces will not generate any notifications for the user. Default is an empty array.

**Setting::Widget::Weather**
+ `order` (number) - array of Weather Widget object ids; each Weather Widget holds a saved weather location in the sidebar widget, and this configurations saves the order in which they appear. Default is an empty array.

#### Get all settings [GET]

Fetches all Setting configurations that the user owns or has access to. Setting objects or configuration keys that are missing from the returned response imply that they are still set to their default value - the setting system only records configuration values that differ from system defaults.

+ Response 200 (application/json)

        {
          "settings": [
            {
              "id":12,
              "type":"Setting::Personal",
              "user_id":"8b919cd2-b977-4793-953c-fb3b6a0e35d0",
              "help_getting_started":false,
              "time_zone_offset":0,
              "time_zone_autodetect_status":-1
            },
            {
              "id":13,
              "type":"Setting::Space",
              "space_id":"5113b5bf-f203-49d6-bb94-44e0c39357ac",
              "email_notifications":false
            }
          ]
        }

#### Create a setting [POST]

Creates a new setting object, obeying the following restrictions:

+ **Setting::Personal** - each user can only have 1 Personal setting. A Personal setting must also have a user_id that references the user.
+ **Setting::Space** - each space can only have 1 Space setting. A Space setting must also have a space_id that references the space.
+ **Setting::UserSpace** - each space can only have 1 UserSpace setting per user. A UserSpace setting must also have a space_id that references the space, and a user_id that references the user.
+ **Setting::UserApps** - each user can only have 1 UserApp setting of each type (e.g. only 1 Setting::UserApp::Conversation per user). A UserApp setting must also have a user_id that references the user.
+ **Setting::Widget** - each user can only have 1 Widget setting of each type (e.g. only 1 Setting::Widget::Notification per user). A Widget setting must also have a widget_id that references the corresponding Widget object (e.g. a Widget::Weather object for a Setting::Widget::Weather object).

If a create request conflicts with the above quantity restrictions, i.e. if a user tries to create a setting that already exists for them such as a Personal setting or their UserApp::Wiki setting, then this action will simply return the existing setting without any changes, behaving much like a get request for an individual setting. This will not change any of the setting's configuration values no matter what values were submitted in the create request. To change an existing setting's configuration values, perform an update request instead.

+ Attributes
    + `setting` (object) - object in which config keys and their new values are defined. Permitted configurations differ from one setting type to another (see main "Settings" entry).
      + `type` (string) - required attribute. The full list of setting types and the config keys that they allow can be found under the main "Settings" (/settings) heading. Different types also have different id reference requirements as defined above.

+ Response 200 (application/json)

        {
          "setting": {
            "id":15,
            "type":"Setting::Personal",
            "user_id":"0d3ad034-0b1b-4c0d-8b66-f31356c11e5a",
            "time_zone_autodetect":"prompt",
            "time_zone_offset":0,
            "time_zone_autodetect_status":-1
          }
        }

### Setting [/settings/{setting_id}]

Operations on individual setting objects. Read the more detailed description under "Settings" (/settings) to see how the setting system operates, and for a reference on the types of settings available and the configurations that each type handles.

+ Parameters
    + `setting_id` (number, required) - Id of the setting.

#### Get a setting [GET]

Returns the setting object of the given id if the user owns or has permission to access to the object. Missing configurations imply that they are still set to their default value - the setting system only records configuration values that differ from system defaults.

+ Response 200 (application/json)

        {
          "setting": {
            "id":12,
            "type":"Setting::Personal",
            "user_id":"8b919cd2-b977-4793-953c-fb3b6a0e35d0",
            "help_getting_started":false,
            "time_zone_offset":0,
            "time_zone_autodetect_status":-1
          }
        }

#### Update a setting [PUT]

Updates and returns the updated setting object of the given id if the user owns or has permission to access the object. Missing configurations imply that they are still set to their default value - the setting system only records configuration values that differ from system defaults.

+ Attributes
    + `setting` (object) - object in which config keys and their new values are defined. Permitted configurations differ from one setting type to another (see main "Settings" entry).

+ Response 200 (application/json)

        {
          "setting": {
            "id":13,
            "type":"Setting::Space",
            "space_id":"5113b5bf-f203-49d6-bb94-44e0c39357ac",
            "realtime_notifications":false
          }
        }

## Group Space Member

### Space Members [/spaces/{space_id}/members]

+ Parameters

    + `space_id` (uuid)

#### Index [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        * `requested_at` (number) - token representing a timestamp of this request
        * `total` (number) - total number of objects
        * `indices` (object) - map of { Int => Invitation ID }, for pagination purposes
            * *3 (string)* (id) - integer order on current page => Space Member ID
        * `objects` (object)
            * *123456 (string)* (object) - an object indexed by Space Member ID
                * `id`: 18700
                * `user_id` (uuid)
                * `space_id` (uuid)
                * `role_name_in_space` (enum[string])
                    * Members
                        * Member
                        * Administrator
                        * Read only
                * `user` (object) - attributes of this Space member
                    * `id` (uuid) - Ribose user ID
                    * `owner` (boolean) - `true` iff is the Space owner
                    * `admin` (boolean) - `true` iff is a Space admin
                    * `connected` (boolean) - `true` iff this Space member is a connection of current user
                    * `mutual_spaces` (array[uuid]) - UUIDs of mutual Spaces
                    * `name` (string) - Space Member's display name


#### Destroy [DELETE /spaces/{space_id}/members/{space_member_id}]

+ Parameters

    + `space_member_id` (id)

+ Request (application/json)

+ Response 403 (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + `message` (string) - Success message for removal of member

### Fetching roles [GET /people/users/{user_id}/roles/get_roles{?in_space}]

+ Parameters

    + `user_id` (uuid) - UUID of the User involved
    + `in_space` (uuid) - UUID of the Space involved

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes (object)
        + `roles` (object) - 0-indexed map
            + *`0` (string)* (object)
                + `id` (id) - Role ID
                + `name` (enum[string])
                    + Members
                        + Member
                        + Administrator
                        + Read only
                + `space_id` (uuid) - UUID of the associated Space
        + `user_role` (object) - details of current user's role
            + `id` (id) - Role ID
            + `name` (enum[string])
                + Members
                    + Member
                    + Administrator
                    + Read only
            + `space_id` (uuid) - UUID of the associated Space

### Assigning roles [PUT /people/users/{user_id}/roles/change_assignment{?in_space}]

+ Parameters

    + `user_id` (uuid) - UUID of the User involved
    + `in_space` (uuid) - UUID of the Space involved

+ Request (application/json)

    + Attributes (object)
        + `checked_role`  (id) - Role ID

+ Response 200 (application/json)

    + Attributes (object)
        + Body
                {}
## Group User

### Check email uniqueness [GET /signup_validation/check_user_field_uniqueness]

+ request (application/json)
    + Attributes (object)
        + `email` (string, required) - email address of user

+ Response 200 (application/json)
    + Attributes (object)
        + `unique` (boolean)

### Create sign-up request [POST /signup_requests]

+ request (application/json)
    + Attributes (object)
        + `email` (string, required) - email address of user

+ Response 200 (application/json)

+ Response 422 (application/json)

### Submit sign-up details [POST /signup.user]

+ request (application/json)
    + Attributes (object)
        + `email` (string, required) - email address of user
        + `otp` (string, required) - OTP value from confirmation email
        + `password` (string, required) - string of new password

+ Response 201 (application/json)
    + Attributes (object)
        + `id` (string) - ID of new user
        + `name` (string) - username

+ Response 422 (application/json)

### Delete user [DELETE /cancel_registration]

+ request (application/json)
    + Attributes (object)
        + `user_id` (uuid) - ID of the user
        + `password` (string) - password of the user

+ Response 200 (application/json)

+ Response 403 (application/json)

+ Response 422 (application/json)

## Group Authentication

### Log in [POST /login]

On successful login, server responds with redirection to URL passed as
`return_to` option in request.  Otherwise, it responds with HTTP 200 OK.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + `utf8` (string, required) - Any string containing characters specific to UTF-8, e.g. `"✓"`
        + `authenticity_token` (string, required) - CSRF prevention
        + `invitation_code` (string, required) - invitation code
        + `return_to` (string, required) - URL redirection parameter
        + `username` (string, required) - username or email
        + `password` (string, required) - password
        + `remember_me` (boolean, required) - `1` for true or `0` for false

+ Response 302 (text/html; charset=utf-8)

+ Response 200 (text/html; charset=utf-8)

### Log out [DELETE /logout]

Typically, server returns HTTP 204 No Content.  That said, a redirection will
happen if no user was logged in.

+ Request (application/x-www-form-urlencoded)
    + Attributes

+ Response 204 (text/html)

+ Response 302 (text/html)
